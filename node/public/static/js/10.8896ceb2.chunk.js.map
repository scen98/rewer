{"version":3,"sources":["components/review/AddedReview.tsx","components/movie/ScoreAdder.tsx","components/review/PostReview.tsx","components/review/MyReview.tsx","components/cast/CastRow.tsx","components/cast/CastList.tsx","components/review/ReviewList.tsx","components/review/MovieReviewFeed.tsx","components/cast/SeriesCastRow.tsx","components/series/SideEpisodeRow.tsx","components/series/EpisodeSelector.tsx","components/series/SeasonSelect.tsx","components/series/SeriesInfo.tsx","pages/Series.tsx","callers/castCaller.ts","callers/seriesCaller.ts","components/movie/MovieRow.tsx","components/series/SeriesDiv.tsx","components/series/FeaturedSeriesSides.tsx","components/profile/LoginMsg.tsx","components/review/ReviewOrderBySelect.tsx","components/movie/MainScore.tsx","components/movie/MovieInfo.tsx"],"names":["AddedReview","review","onEdit","onDelete","className","onClick","Score","value","score","text","popIndex","normalFormat","date","ScoreAdder","startValue","setScore","useState","setValue","useEffect","oldValue","icon","faMinus","faPlus","PostReview","onPost","useBinder","myReview","setMyReview","bindMyReview","newValue","name","rows","onChange","MyReview","movie","id","movieId","userName","localStorage","getItem","postReview","reviewContent","setReviewContent","mainMsg","setMainMsg","postCaller","reviewCaller","reviewSignal","startEditing","saveReview","a","reviewPath","updateReview","ECallType","ISOK","removeReview","insertReview","INSERT","newId","Date","toLocaleDateString","alert","deleteReview","limit","offset","selectReviewByUserAndMovie","SELECT","LoginMsg","message","getMyReview","abort","getTime","releaseDate","CastRow","cast","useImage","artistId","ESize","Small","imgsrc","onImgError","src","onError","alt","artistName","to","CastList","casts","sort","compareCastType","map","c","key","ReviewList","reviews","r","ReviewRow","MovieReviewFeed","useAsyncReference","setReviews","undefined","orderBy","setOrderBy","reviewHeader","setReviewHeader","useScroll","addScroll","removeScroll","getReviews","orderby","selectReviewsByMovie","requestedReviews","length","current","reviewId","filter","EReviewOrderBy","toString","ReviewOrderBySelect","defaultValue","onUpdate","SeriesCastRow","episodeCount","SideEpisodeRow","episode","selectedId","mainClass","setMainClass","title","avgScore","EpisodeSelector","episodes","onSelectedChange","genres","summary","selectedEpisode","setSelectedEpisode","e","SeasonSelect","selectedSeason","setSelectedSeason","seasons","find","s","parseInt","target","order","SeriesInfo","series","setAvgScore","getEpisodeCount","getAvgSeriesScore","window","screen","width","MainScore","Math","round","g","genreName","getFirstEpisodeDate","getAvgRuntime","getSeasonCount","Series","getParameter","setSeries","seriesCast","setSeriesCast","seriesId","seriesPath","selectDetailedSeries","seriesCaller","seriesSignal","selectedSeries","selectDetailedSeriesPostFetch","getSeriesCast","location","href","document","body","scrollTop","documentElement","getSeries","innerWidth","castTypeId","MovieInfo","FeaturedSeriesSides","MovieRow","castPath","getCastTypes","insertCast","insertCasts","updateCast","deleteCast","cast1","cast2","insertSeries","updateSeries","uploadSeriesPoster","selectLatestPreviewSeries","selectLatestPreviewSeriesJson","insertSeriesGenre","deleteSeriesGenre","file","UploadFile","ok","detailedSeries","compareMovieGenresByName","orderSeasonCast","orderCasts","compareEpisodes","sum","forEach","season","epCount","runtime","setSeriesCastFromSeason","reviewedEpisodeCount","setSeriesCastFromEpisode","setSeriesCastFromCast","sc","updatedNames","characterNames","push","handleExistingSeriesCast","episode1","episode2","cutPos","imgClass","setImgClass","useCutter","SeriesDiv","scoreClass","setScoreClass","scoreLine","useRef","style","display","ref","featueredSeries","setFeaturedSeries","getCaller","signal","featured","slice","requestFeaturedSeries","f","select","Normal","getDay","getMonth","getYear","m"],"mappings":"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","file":"static/js/10.8896ceb2.chunk.js","sourcesContent":["import React, { Fragment, useEffect } from 'react'\r\nimport { IReview } from '../../../common/review'\r\nimport { generateFakeErrorMessage } from '../../callers/articleCaller'\r\nimport { normalFormat } from '../../dateParser'\r\nimport { Score } from '../movie/Score'\r\nimport \"./reviewStyle.css\"\r\n\r\ninterface IEditableReview{\r\n    review: IReview;\r\n    onEdit: (rev: IReview) => void;\r\n    onDelete: (toDelete: IReview)=> void;\r\n}\r\n\r\nexport const AddedReview: React.FC<IEditableReview> = ({review, onEdit, onDelete}: IEditableReview)=> {\r\n    function edit(){\r\n        onEdit(review);\r\n    }\r\n\r\n    function removeReview(){\r\n        onDelete(review);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"review-grid\">\r\n                <button onClick={edit} >Edit</button>                                               \r\n                <button onClick={removeReview}>Delete</button>\r\n                <Score value={review.score} />\r\n            </div>\r\n            <p>{review.text}</p>\r\n            <div className=\"like-adder\">\r\n                <div>\r\n                <span>{review.popIndex} <i>likes</i></span>\r\n                </div>\r\n                <span className=\"review-date\">{normalFormat(review.date)}</span>\r\n            </div>     \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AddedReview;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect, Fragment } from 'react'\r\nimport \"./movieStyle.css\"\r\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Score } from './Score'\r\ninterface IScoreAdder{\r\n    startValue: number;\r\n    setScore: (newValue: number)=> void;\r\n}\r\n\r\nexport const ScoreAdder: React.FC<IScoreAdder> = ({startValue, setScore}: IScoreAdder)=> {\r\n    const [value, setValue] = useState(startValue);\r\n    function increment(){\r\n        if(value < 10){\r\n            setValue(oldValue => { return oldValue + 1 });\r\n        }\r\n    }\r\n\r\n    function decrement(){\r\n        if(value > 1){\r\n            setValue(oldValue => { return oldValue - 1 });\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setScore(value);\r\n    }, [value]);\r\n\r\n    return (\r\n        <div className=\"score-adder-grid\">                                  \r\n            <button onClick={decrement} className=\"score-btn minus\">\r\n                <FontAwesomeIcon icon={faMinus} />\r\n            </button>\r\n            <Score value={value} />\r\n            <button onClick={increment} className=\"score-btn plus\">\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { IReview } from '../../../common/review';\r\nimport { useBinder } from '../../hooks'\r\nimport { ScoreAdder } from '../movie/ScoreAdder'\r\n\r\ninterface IPostReview{\r\n    review: IReview;\r\n    onPost: (currentReview: IReview) => void;\r\n}\r\n\r\nexport const PostReview: React.FC<IPostReview> = ({review, onPost}: IPostReview) => {\r\n    const [myReview, setMyReview, bindMyReview] = useBinder(review);\r\n    function updateScore(newValue: number){\r\n        setMyReview({...myReview, score: newValue});\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <ScoreAdder startValue={review.score} setScore={updateScore}/>    \r\n            <textarea className=\"review-textarea\" name=\"text\" rows={10} value={myReview.text} onChange={bindMyReview} />\r\n            <button onClick={()=>{ onPost(myReview) }}>Post</button>                   \r\n        </Fragment>\r\n    )\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { Fragment, useEffect, useState } from 'react'\r\nimport { reviewPath } from \"../../callers/reviewCaller\"\r\nimport LoginMsg from '../profile/LoginMsg';\r\nimport { AddedReview } from './AddedReview';\r\nimport { PostReview } from './PostReview';\r\nimport { IReview } from \"../../../common/review\"\r\nimport { IMovie } from '../../../common/movie';\r\nimport { ECallType, postCaller } from '../../callers/caller';\r\n\r\ninterface IMyReview{\r\n    movie: IMovie;\r\n}\r\n\r\nexport const MyReview: React.FC<IMyReview> = ({movie}: IMyReview) => { \r\n    const [reviewContent, setReviewContent] = useState(<PostReview review={{id: 0, text: \"\", movieId: movie.id, date: \"\", popIndex: 0, score: 5, userName: localStorage.getItem(\"userName\")}} onPost={postReview} />);\r\n    const [mainMsg, setMainMsg] = useState(\"\");\r\n    const [reviewCaller, reviewSignal] = postCaller();\r\n    useEffect(()=>{\r\n        if(localStorage.getItem(\"userName\") == null){\r\n            setReviewContent(<LoginMsg message={\"post a review\"} />);\r\n        } else {\r\n            if(movie.id > 0){\r\n                getMyReview();\r\n            }\r\n        }\r\n        async function getMyReview(){\r\n           const myReview: IReview = await reviewCaller({ userName: localStorage.getItem(\"userName\"), movieId: movie.id, limit: 1, offset: 0}, reviewPath.selectReviewByUserAndMovie, ECallType.SELECT);\r\n            if(myReview){\r\n                setReviewContent(<AddedReview review={myReview} onEdit={startEditing} onDelete={removeReview} />);                 \r\n            } else{\r\n                setMainMsg(\"You haven't posted a review for this movie yet.\");\r\n                setReviewContent(<PostReview review={{id: 0, text: \"\", movieId: movie.id, date: \"\", popIndex: 0, score: 5, userName: \"\"}} onPost={postReview} />);  \r\n            }\r\n        }\r\n        return ()=>{\r\n            reviewSignal.abort();\r\n        }\r\n    }, [movie.id]);\r\n\r\n    useEffect(()=>{\r\n        if(new Date().getTime() < new Date(movie.releaseDate).getTime()){\r\n            setReviewContent(<p>This movie has not been released yet.</p>);\r\n            setMainMsg(\"\");\r\n        }\r\n    }, [movie]);\r\n\r\n    function startEditing(review: IReview){\r\n        setReviewContent(<PostReview review={review} onPost={saveReview} /> );\r\n        setMainMsg(\"Editing your review:\");\r\n    }\r\n\r\n    async function saveReview(review: IReview){\r\n        const fetchResult = await reviewCaller(review, reviewPath.updateReview, ECallType.ISOK);\r\n        if(fetchResult){\r\n            setReviewContent(<AddedReview review={review} onEdit={startEditing} onDelete={removeReview} />);\r\n            setMainMsg(\"Review has been updated.\");\r\n        }\r\n    }\r\n\r\n    async function postReview(review: IReview){\r\n        const newId = await reviewCaller(review, reviewPath.insertReview, ECallType.INSERT);\r\n        if(newId){\r\n            review = {...review, id: newId, date: new Date().toLocaleDateString(\"hu-HU\"), popIndex: 1};\r\n            setReviewContent(<AddedReview review={review} onEdit={startEditing} onDelete={removeReview} />);\r\n            setMainMsg(\"Your review has been posted.\");\r\n        } else {\r\n            alert(\"Server error: could not post your review.\");\r\n        }\r\n    }\r\n\r\n    async function removeReview(review: IReview){\r\n        const fetchResult = await reviewCaller({ id: review.id }, reviewPath.deleteReview, ECallType.ISOK);\r\n        if(fetchResult){\r\n            setMainMsg(\"Your review has been deleted.\");\r\n            setReviewContent(<PostReview review={{id: 0, text: \"\", movieId: movie.id, date: \"\", popIndex: 0, score: 5, userName: localStorage.getItem(\"userName\")}} onPost={postReview} /> );\r\n        } else {\r\n            alert(\"Server error: could not delete your review.\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"center-text\">My Review</h3>\r\n            <p>{mainMsg}</p>\r\n            <div className=\"review-container\">\r\n                {reviewContent}\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { ICast } from '../../../common/cast';\r\nimport { ESize, useImage } from '../../hooks';\r\nimport \"./castStyle.css\"\r\n\r\ninterface ICastRow{\r\n    cast: ICast;\r\n}\r\n\r\nexport const CastRow: React.FC<ICastRow> = ({cast}: ICastRow) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/portraits\", `${cast.artistId}.jpg`, ESize.Small);\r\n    return (\r\n        <div className=\"cast-row\">\r\n            <img src={imgsrc} onError={onImgError} alt={cast.artistName} />\r\n            <span><Link to={`/rewer/star?artistId=${cast.artistId}`} >{cast.artistName}</Link></span>\r\n            <p className=\"cast-row-item\">{cast.name}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CastRow;","import React from 'react'\r\nimport { ICast } from '../../../common/cast';\r\nimport { compareCastType } from '../../callers/castCaller';\r\nimport CastRow from './CastRow';\r\n\r\ninterface ICastList{\r\n    casts: ICast[];\r\n}\r\n\r\nexport const CastList: React.FC<ICastList> = ({casts}: ICastList) => {\r\n    return (\r\n        <div>\r\n            {casts.sort(compareCastType).map(c=> {\r\n                return <CastRow key={`cast-${c.id}`} cast={c} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CastList;","import React from 'react'\r\nimport { IReview } from '../../../common/review';\r\nimport { ReviewRow } from './ReviewRow';\r\n\r\ninterface IReviewList{\r\n    reviews: IReview[];\r\n    onDelete: (reviewId: number) => void;\r\n}\r\n\r\nexport const ReviewList: React.FC<IReviewList> = ({reviews, onDelete}: IReviewList) => {\r\n    return (\r\n        <div>\r\n            {reviews.map(r=>{\r\n                return <ReviewRow key={`review-${r.id}`} onDelete={onDelete} review={r} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReviewList;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { Fragment, useEffect, useState, useContext } from 'react'\r\nimport { normalFormat } from '../../dateParser';\r\nimport { useAsyncReference, useScroll } from '../../hooks';\r\nimport { EReviewOrderBy, reviewPath } from \"../../callers/reviewCaller\";\r\nimport ReviewList from './ReviewList';\r\nimport ReviewOrderBySelect from './ReviewOrderBySelect';\r\nimport { IMovie } from '../../../common/movie';\r\nimport { ECallType, postCaller } from '../../callers/caller';\r\n\r\ninterface IMovieReviewFeed{\r\n    movie: IMovie;\r\n}\r\n\r\nexport const MovieReviewFeed: React.FC<IMovieReviewFeed> = ({movie}: IMovieReviewFeed) => {\r\n    const [reviews, setReviews] = useAsyncReference([]);\r\n    const [orderBy, setOrderBy] = useState<EReviewOrderBy>(undefined);\r\n    const [reviewHeader, setReviewHeader] = useState<string>(\"\");\r\n    const reviewPerPage = 10;\r\n    const [reviewCaller, reviewSignal] = postCaller();\r\n    const [addScroll, removeScroll] = useScroll(0.9, getMoreReviews);\r\n\r\n    useEffect(()=>{\r\n        return ()=> {\r\n            removeScroll();\r\n            reviewSignal.abort();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        if(new Date().getTime() >= new Date(movie.releaseDate).getTime()){\r\n            if(orderBy === EReviewOrderBy.popIndex){\r\n                if(movie.id > 0) getReviews();\r\n            } else {\r\n                setOrderBy(EReviewOrderBy.popIndex);\r\n            }          \r\n        } else {\r\n            setReviewHeader(`Reviews will be available on ${normalFormat(movie.releaseDate.toString())}`);\r\n        } \r\n        return ()=> {\r\n            removeScroll();\r\n        }\r\n    }, [movie.id, movie.releaseDate]);\r\n\r\n    useEffect(()=>{\r\n        if(movie.id > 0 && orderBy != null){\r\n            getReviews();\r\n        }\r\n        return ()=> {\r\n            removeScroll();\r\n        }\r\n    }, [orderBy]);\r\n\r\n    async function getReviews(){\r\n        const requestedReviews = await reviewCaller({ movieId: movie.id, limit: reviewPerPage, offset: 0, orderby: orderBy}, reviewPath.selectReviewsByMovie);\r\n        if(requestedReviews){\r\n            setReviews(requestedReviews);\r\n            setReviewHeader(\"Reviews\");\r\n            if(requestedReviews.length === reviewPerPage) addScroll();\r\n        } else {\r\n            setReviewHeader(\"Server errror: could not download reviewdata.\");\r\n        }\r\n    }\r\n\r\n    async function getMoreReviews(){\r\n        removeScroll();\r\n        const requestedReviews = await reviewCaller({ movieId: movie.id, limit: reviewPerPage, offset: reviews.current.length, orderby: orderBy}, reviewPath.selectReviewsByMovie);\r\n        if(requestedReviews){\r\n            setReviews([...reviews.current, ...requestedReviews]);\r\n            if(requestedReviews.length === reviewPerPage) addScroll();\r\n        } else {\r\n            setReviewHeader(\"Server errror: could not download reviewdata.\");\r\n        }\r\n    }\r\n\r\n    async function deleteReview(reviewId: number){\r\n        if(await reviewCaller({ id: reviewId }, reviewPath.deleteReview, ECallType.ISOK)){\r\n            setReviews(reviews.current.filter(r=> r.id !== reviewId));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"center-text\">{reviewHeader}</h2>\r\n            {new Date().getTime() >= new Date(movie.releaseDate).getTime() ? \r\n            (<Fragment>\r\n                <ReviewOrderBySelect defaultValue={orderBy} onUpdate={(newValue: EReviewOrderBy)=> { setOrderBy(newValue); }} />\r\n                <ReviewList onDelete={deleteReview} reviews={reviews.current} />\r\n            </Fragment>): \r\n            (<Fragment></Fragment>)}    \r\n        </div>\r\n    )\r\n}\r\nexport default MovieReviewFeed;","import React from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { ISeriesCast } from '../../../common/cast'\r\nimport { ESize, useImage } from '../../hooks'\r\nimport \"./castStyle.css\"\r\n\r\ninterface ISeriesCastRow{\r\n    cast: ISeriesCast;\r\n}\r\n\r\nexport const SeriesCastRow: React.FC<ISeriesCastRow> = ({cast}: ISeriesCastRow) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/portraits\", `${cast.artistId}.jpg`, ESize.Small);\r\n    return (\r\n        <div className=\"cast-row\">\r\n            <img src={imgsrc} onError={onImgError} alt={cast.artistName} />\r\n            <span><Link to={`/rewer/star?artistId=${cast.artistId}`} >{cast.artistName}</Link></span>\r\n            <p className=\"cast-row-item\">{cast.name}({cast.episodeCount})</p>\r\n        </div>\r\n    )\r\n}\r\nexport default SeriesCastRow;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { IDetailedMovie } from '../../../common/movie';\r\nimport { Score } from '../movie/Score'\r\n\r\ninterface ISideEpisodeRow{\r\n    episode: IDetailedMovie;\r\n    selectedId: number;\r\n}\r\n\r\nexport const SideEpisodeRow: React.FC<ISideEpisodeRow> = ({episode, selectedId}: ISideEpisodeRow) => {\r\n    const [mainClass, setMainClass] = useState(\"side-row\");\r\n    useEffect(()=>{\r\n        if(selectedId === episode.id){\r\n            setMainClass(\"side-row selected-row\");\r\n        } else {\r\n            setMainClass(\"side-row\");\r\n        }\r\n    }, [selectedId]);\r\n    return (\r\n        <div className={mainClass}>\r\n            <p>{episode.title}</p>\r\n            <Score value={episode.avgScore} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideEpisodeRow;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect} from 'react'\r\nimport { IDetailedMovie, IMovie } from '../../../common/movie';\r\nimport SideEpisodeRow from './SideEpisodeRow';\r\nimport \"./seriesStyle.css\"\r\n\r\ninterface IEpisodeSelector{\r\n    episodes: IDetailedMovie[];\r\n    onSelectedChange: (ep: IMovie) => void;\r\n}\r\n\r\nexport const EpisodeSelector: React.FC<IEpisodeSelector> = ({episodes, onSelectedChange}: IEpisodeSelector) => {\r\n    const [selectedEpisode, setSelectedEpisode] = useState({id: 0, title: \"\", releaseDate: \"\", casts: [], genres: [], summary: \"\"});\r\n    useEffect(()=>{\r\n        onSelectedChange(selectedEpisode);\r\n    }, [selectedEpisode]);\r\n    return (\r\n        <div>\r\n            {episodes.map(e=>{\r\n                return <div key={`episode-select-${e.id}`} onClick={()=>{ setSelectedEpisode(e) }}><SideEpisodeRow episode={e} selectedId={selectedEpisode.id} /></div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default EpisodeSelector;","import React from 'react'\r\nimport { ISeason } from '../../../common/season'\r\n\r\ninterface ISeasonSelect{\r\n    selectedSeason: ISeason;\r\n    setSelectedSeason: (s: ISeason) => void;\r\n    seasons: ISeason[];\r\n}\r\n\r\nexport const SeasonSelect: React.FC<ISeasonSelect> = ({selectedSeason, setSelectedSeason, seasons}: ISeasonSelect) => {\r\n    return (\r\n       <select value={selectedSeason.id.toString()} onChange={(e)=> { setSelectedSeason(seasons.find(s=> s.id === parseInt(e.target.value))) }}>\r\n           {seasons.map(s=> {\r\n               return <option key={s.id} value={s.id.toString()}>Season {s.order}</option>\r\n           })}\r\n       </select>\r\n    )\r\n}\r\nexport default SeasonSelect;","import React, { Fragment, useState, useEffect } from 'react'\r\nimport MainScore from '../movie/MainScore'\r\nimport \"../movie/movieStyle.css\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { normalFormat } from '../../dateParser'\r\nimport { ISeries } from '../../../common/series'\r\nimport { getAvgRuntime, getAvgSeriesScore, getEpisodeCount, getFirstEpisodeDate, getSeasonCount } from '../../callers/seriesCaller'\r\nimport { useImage } from '../../hooks'\r\ninterface ISeriesInfo{\r\n    series: ISeries;\r\n}\r\n\r\nexport const SeriesInfo: React.FC<ISeriesInfo> = ({series}: ISeriesInfo) => {\r\n    const [avgScore, setAvgScore] = useState(0);\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/seriesposters\", `${series.id}.jpg`);\r\n    useEffect(()=>{\r\n        if(series.seasons.length > 0 && getEpisodeCount(series) > 0){\r\n            setAvgScore(getAvgSeriesScore(series));\r\n        }\r\n    }, [series]);\r\n    return (\r\n        <div>\r\n            {window.screen.width > 1000 ?\r\n            (<Fragment>\r\n                <div className=\"title-grid\">\r\n                    <p className=\"title\">{series.title}</p>\r\n                    <MainScore value={Math.round(avgScore * 10) / 10} />   \r\n                </div>\r\n                {parseInt(localStorage.getItem(\"permission\")) > 1 ? \r\n                (<div><Link to={`/rewer/editseries?seriesId=${series.id}`}>Edit series' page</Link></div>):\r\n                (<Fragment></Fragment>)}\r\n                {series.genres.map(g=> {\r\n                    return <Link key={`genre-${g.id}`} className=\"genre\" to={\"todo\"}>{g.genreName}</Link>\r\n                })}\r\n\r\n                <div className=\"movie-info-grid\">\r\n                    <div className=\"movie-info-grid-item\">\r\n                        <p >{series.summary}</p>\r\n                        {(getFirstEpisodeDate(series) != null)?\r\n                        (<Fragment>\r\n                            <p>Premier: {normalFormat(getFirstEpisodeDate(series))}</p>\r\n                            <p>Average runtime: {Math.round(getAvgRuntime(series))} minutes</p>\r\n                            </Fragment>):\r\n                        (<Fragment></Fragment>)}\r\n                        <p>{getSeasonCount(series)} seasons</p>\r\n                        <p>{getEpisodeCount(series)} episodes</p>\r\n                    </div>\r\n                    <img src={imgsrc} onError={onImgError} className=\"poster\" title={series.title} alt={`${series.title}-poster`} />\r\n                </div>\r\n            </Fragment>) :\r\n            (<Fragment>\r\n                 <div className=\"title-grid\">\r\n                    <p className=\"title\">{series.title}</p>\r\n                    <MainScore value={Math.round(avgScore * 10) / 10} />   \r\n                </div>\r\n                {parseInt(localStorage.getItem(\"permission\")) > 1 ? \r\n                (<div><Link to={`/rewer/editseries?seriesId=${series.id}`}>Edit series' page</Link></div>):\r\n                (<Fragment></Fragment>)}\r\n                {series.genres.map(g=> {\r\n                    return <Link key={`genre-${g.id}`} className=\"genre\" to={\"todo\"}>{g.genreName}</Link>\r\n                })}\r\n\r\n                <div className=\"movie-info-grid\">\r\n                    <div className=\"movie-info-grid-item\">\r\n                        <p >{series.summary}</p>\r\n                        {(getFirstEpisodeDate(series) != null)?\r\n                        (<Fragment>\r\n                            <p>Premier: {normalFormat(getFirstEpisodeDate(series))}</p>\r\n                            <p>Average runtime: {Math.round(getAvgRuntime(series))} minutes</p>\r\n                            </Fragment>):\r\n                        (<Fragment></Fragment>)}\r\n                        <p>{getSeasonCount(series)} seasons</p>\r\n                        <p>{getEpisodeCount(series)} episodes</p>\r\n                    </div>\r\n                    <img src={imgsrc} onError={onImgError} className=\"poster\" title={series.title} alt={`${series.title}-poster`} />\r\n                </div>\r\n            </Fragment>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SeriesInfo;","import React, { useState, useEffect, Fragment } from 'react'\r\nimport { ISeriesCast } from '../../common/cast';\r\nimport { IDetailedMovie, IMovie } from '../../common/movie';\r\nimport { ISeason } from '../../common/season';\r\nimport { ISeries } from '../../common/series';\r\nimport { postCaller } from '../callers/caller';\r\nimport { getSeriesCast, seriesPath, selectDetailedSeriesPostFetch } from '../callers/seriesCaller';\r\nimport CastList from '../components/cast/CastList';\r\nimport SeriesCastRow from '../components/cast/SeriesCastRow';\r\nimport MovieInfo from '../components/movie/MovieInfo';\r\nimport { MovieRow } from '../components/movie/MovieRow';\r\nimport MovieReviewFeed from '../components/review/MovieReviewFeed';\r\nimport { MyReview } from '../components/review/MyReview';\r\nimport EpisodeSelector from '../components/series/EpisodeSelector';\r\nimport FeaturedSeriesSides from '../components/series/FeaturedSeriesSides';\r\nimport SeasonSelect from '../components/series/SeasonSelect';\r\nimport SeriesInfo from '../components/series/SeriesInfo';\r\nimport { getParameter } from '../urlManager';\r\nexport default function Series() {\r\n    const [series, setSeries] = useState<ISeries>({id: parseInt(getParameter(\"seriesId\")), title: \"\", genres: [], seasons: [], summary: \"\", avgScore: 0});\r\n    const [seriesCast, setSeriesCast] = useState([]);\r\n    const [selectedSeason, setSelectedSeason] = useState<ISeason>({id: 0, seriesId: parseInt(getParameter(\"seriesId\")), episodes: []});\r\n    const [selectedEpisode, setSelectedEpisode] = useState<IMovie>({id: 0, title: \"\", releaseDate: \"\", summary: \"\", genres: [], casts: []});\r\n    const [seriesCaller, seriesSignal] = postCaller({ id: series.id }, seriesPath.selectDetailedSeries);\r\n    useEffect(()=>{\r\n        document.body.scrollTop = 0;\r\n        document.documentElement.scrollTop = 0;\r\n\r\n        async function getSeries(){\r\n            const selectedSeries = await seriesCaller();\r\n            if(selectedSeries){\r\n                selectDetailedSeriesPostFetch(selectedSeries);\r\n                setSeries(selectedSeries);\r\n                setSeriesCast(getSeriesCast(selectedSeries));\r\n                if(selectedSeries.seasons.length > 0) setSelectedSeason(selectedSeries.seasons[0]);\r\n            } else {\r\n                window.location.href = \"/404.html\";\r\n            }\r\n        }\r\n        if(series.id > 0) getSeries();\r\n        return ()=>{\r\n            seriesSignal.abort();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        if(series) document.title = `${series.title} - Rewer`;\r\n    }, [series]);\r\n   \r\n    return (\r\n        <Fragment>\r\n            {window.innerWidth > 800 ? \r\n            (<div className=\"main-grid\">\r\n                <div className=\"left-item\">\r\n                        <div className=\"side-container medium-side\">\r\n                            <SeasonSelect selectedSeason={selectedSeason} seasons={series.seasons} setSelectedSeason={setSelectedSeason} />                            \r\n                            <EpisodeSelector episodes={selectedSeason.episodes} onSelectedChange={(e: IDetailedMovie)=>{ setSelectedEpisode(e) }} />                              \r\n                        </div>\r\n                        <div className=\"side-container medium-side\">\r\n                            <MyReview key={`my_review_${selectedEpisode.id}`} movie={selectedEpisode} />  \r\n                        </div>\r\n                        {selectedEpisode.casts.length > 0 ?\r\n                            (<div className=\"side-container medium-side\" >\r\n                                <h3 className=\"center-text\">Cast</h3>\r\n                                <CastList casts={selectedEpisode.casts.filter(c=> c.castTypeId === 4 || c.castTypeId === 5)} />\r\n                            </div>):\r\n                        (<Fragment></Fragment>)}\r\n                </div>\r\n                \r\n                <div className=\"main-item\">\r\n                    <div className=\"bottom-border\">\r\n                    <SeriesInfo series={series} />\r\n                   </div>\r\n                    {(selectedEpisode.id > 0) ? \r\n                    (<Fragment>\r\n                        <MovieInfo movie={selectedEpisode} />                        \r\n                        <MovieReviewFeed movie={selectedEpisode} />\r\n                    </Fragment>):\r\n                    (<p><i>No episode is selected.</i></p>)}\r\n                    \r\n                </div>\r\n                <div className=\"right-item\">\r\n                    <div className=\"side-container medium-side\">\r\n                        <h3 className=\"center-text\">Cast</h3>\r\n                        {seriesCast.filter(s=> s.castTypeId > 3).map(c => {\r\n                            return <SeriesCastRow key={`${c.artistId}-${c.castTypeId}`} cast={c} />\r\n                        })}\r\n                    </div>     \r\n                    <div className=\"side-container large-side\">\r\n                        <FeaturedSeriesSides />\r\n                    </div>           \r\n                </div>\r\n            </div>):\r\n            (<div className=\"main-container\">\r\n                <SeriesInfo series={series} />\r\n                <h3>Cast</h3>\r\n                {seriesCast.filter(s=> s.castTypeId > 3).map(c => {\r\n                    return <SeriesCastRow key={`${c.artistId}-${c.castTypeId}`} cast={c} />\r\n                })}\r\n                <SeasonSelect selectedSeason={selectedSeason} seasons={series.seasons} setSelectedSeason={setSelectedSeason} />\r\n                {selectedSeason.episodes.map(e => {\r\n                    return <MovieRow key={`episode-${e.id}`} movie={e} />\r\n                })}\r\n            </div>)}\r\n        </Fragment>\r\n    )\r\n}\r\n","import { ICast, IMovieCast } from \"../../common/cast\";\r\n\r\nexport const castPath = {\r\n    getCastTypes: \"/jsondb/cast_types.json\",\r\n    insertCast: \"/cast/insert_cast\",\r\n    insertCasts: \"/cast/insert_casts\",\r\n    updateCast: \"/cast/update_cast\",\r\n    deleteCast: \"/cast/delete_cast\"\r\n}\r\n\r\nexport function compareCastType(cast1: ICast, cast2: ICast){\r\n    if(cast1.castTypeId < cast2.castTypeId){\r\n        return -1;\r\n    }\r\n    if(cast1.castTypeId > cast2.castTypeId){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function compareDate(cast1: IMovieCast, cast2: IMovieCast){\r\n    if(new Date(cast1.movieDate) < new Date(cast2.movieDate)){\r\n        return -1;\r\n    }\r\n    if(new Date(cast1.movieDate) > new Date(cast2.movieDate)){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n","import { ICast, ISeriesCast } from \"../../common/cast\";\r\nimport { IMovie } from \"../../common/movie\";\r\nimport { ISeason } from \"../../common/season\";\r\nimport { IDetailedSeries, IPreviewSeries, ISeries, ISeriesGenre } from \"../../common/series\";\r\nimport { POSTAsynch, UploadFile } from \"./caller\";\r\nimport { compareCastType } from \"./castCaller\";\r\nimport { compareMovieGenresByName } from \"./movieCaller\";\r\n\r\nexport const seriesPath = {\r\n    insertSeries:\"/series/insert_series\",\r\n    updateSeries: \"/series/update_series\",\r\n    uploadSeriesPoster: \"/series/upload_series_poster\",\r\n    selectDetailedSeries: \"/series/select_detailed_series\",\r\n    selectLatestPreviewSeries: \"/series/select_latest_preview_series\",\r\n    selectLatestPreviewSeriesJson: \"/jsondb/latest_series.json\", \r\n    insertSeriesGenre: \"/genre/insert_series_genre\",\r\n    deleteSeriesGenre: \"/genre/delete_series_genre\"\r\n}\r\n\r\nexport async function uploadSeriesPoster(file: FormData): Promise<boolean>{\r\n    const response = await UploadFile(\"/series/upload_series_poster\", file);\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function selectDetailedSeriesPostFetch(detailedSeries: IDetailedSeries){\r\n    detailedSeries.genres.sort(compareMovieGenresByName);\r\n    orderCasts(detailedSeries);\r\n    for(let season of detailedSeries.seasons) {\r\n        season.episodes.sort(compareEpisodes);\r\n    }\r\n}\r\n\r\nexport async function selectLatestPreviewSeries(limit: number, offset: number): Promise<IPreviewSeries[] | null >{\r\n    const response = await POSTAsynch(\"/series/select_latest_preview_series\", { limit: limit, offset: offset});\r\n    if(response.ok){\r\n        return await response.json();\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function insertSeriesGenre(seriesGenre: ISeriesGenre): Promise<number | null>{\r\n    const response = await POSTAsynch(\"genre/insert_series_genre\", seriesGenre);\r\n    if(response.ok){\r\n        return (await response.json()).newId;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function deleteSeriesGenre(id: number): Promise<boolean>{\r\n    const response = await POSTAsynch(\"genre/delete_series_genre\", { id: id});\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getSeasonCount(series: ISeries): number{\r\n    return series.seasons.filter(s=> s.episodes.length > 0).length;\r\n}\r\n\r\nexport function getEpisodeCount(series: ISeries): number{\r\n    let sum: number = 0;\r\n    series.seasons.forEach(season => {\r\n        sum += season.episodes.length;\r\n    });\r\n    return sum;\r\n}\r\n\r\n\r\nexport function getFirstEpisodeDate(series: ISeries): string{\r\n    if(series.seasons.length > 0 && series.seasons[0].episodes.length > 0){\r\n        return series.seasons[0].episodes[0].releaseDate;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function getAvgRuntime(series: ISeries): number{\r\n    let epCount: number = getEpisodeCount(series);\r\n    let sum: number = 0;\r\n    for(let season of series.seasons) {\r\n        for(let episode of season.episodes) {\r\n            if(episode.runtime > 0) sum += episode.runtime;\r\n        }\r\n    }\r\n    return sum / epCount;\r\n}\r\n\r\nexport function getSeriesCast(series: ISeries): ISeriesCast[]{\r\n    let seriesCast: ISeriesCast[] = [];\r\n    for(let season of series.seasons) {\r\n        setSeriesCastFromSeason(season, seriesCast);\r\n    }\r\n    return seriesCast;\r\n}\r\n\r\nfunction compareSeriesCastByEpisodeCount(scast1: ISeriesCast, scast2: ISeriesCast){\r\n    if(scast1.episodeCount > scast2.episodeCount){\r\n        return -1;\r\n    }\r\n    if(scast1.episodeCount < scast2.episodeCount){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function getAvgSeriesScore(series: ISeries){\r\n    let reviewedEpisodeCount: number = 0;\r\n    let sum: number = 0;\r\n    for(let season of series.seasons) {\r\n        for(let episode of season.episodes) {\r\n            if(episode.avgScore > 0){\r\n                sum = sum + episode.avgScore;\r\n                reviewedEpisodeCount++;\r\n            } \r\n        }\r\n    }\r\n    return sum / reviewedEpisodeCount;\r\n}\r\n\r\nfunction setSeriesCastFromSeason(season: ISeason, seriesCast: ISeriesCast[]){\r\n    for(let episode of season.episodes) {\r\n        setSeriesCastFromEpisode(episode, seriesCast);\r\n    }\r\n}\r\n\r\nfunction setSeriesCastFromEpisode(episode: IMovie, seriesCast: ISeriesCast[]){\r\n    for(let cast of episode.casts) {\r\n        setSeriesCastFromCast(cast, seriesCast);\r\n    }\r\n}\r\n\r\nfunction setSeriesCastFromCast(cast: ICast, seriesCast: any[]){\r\n    let sc: ISeriesCast = seriesCast.find(a=> a.artistId === cast.artistId);\r\n    if(sc != null){\r\n        handleExistingSeriesCast(cast, sc);\r\n    } else {\r\n        seriesCast.push({ \r\n            artistId: cast.artistId, \r\n            artistName: cast.artistName, \r\n            episodeCount: 1, \r\n            characterNames: [cast.name], \r\n            castTypeId: cast.castTypeId } );\r\n    }\r\n}\r\n\r\nfunction handleExistingSeriesCast(cast: ICast, sc: any){\r\n     let updatedNames = sc.characterNames;\r\n     if(sc.characterNames.filter(a=> a === cast.name).length === 0){\r\n         updatedNames.push(cast.name);\r\n     }\r\n     sc = {...sc, episodeCount: sc.episodeCount++, characterNames: updatedNames };\r\n}\r\n\r\nfunction orderCasts(series: ISeries){\r\n    for(let season of series.seasons) {\r\n        orderSeasonCast(season);\r\n    }\r\n}\r\n\r\nfunction orderSeasonCast(seasons: ISeason){\r\n    for(let episode of seasons.episodes) {\r\n            episode.casts.sort(compareCastType);\r\n    }\r\n}\r\n\r\nexport function compareEpisodes(episode1: IMovie, episode2: IMovie){\r\n    if(new Date(episode1.releaseDate) > new Date(episode2.releaseDate)){\r\n        return 1;\r\n    }\r\n    if(new Date(episode1.releaseDate) < new Date(episode2.releaseDate)){\r\n        return -1;\r\n    }\r\n    if(episode1.releaseDate === episode2.releaseDate){\r\n        if(episode1.id > episode2.id) return 1;\r\n        if(episode1.id < episode2.id) return -1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { Score } from './Score';\r\nimport { normalFormat } from '../../dateParser';\r\nimport { IMovie } from '../../../common/movie';\r\nimport { ESize, useCutter, useImage } from '../../hooks';\r\nimport \"./movieStyle.css\";\r\n\r\ninterface IMovieRow{\r\n    movie: IMovie;\r\n    cutPos?: number;\r\n}\r\n\r\nexport const MovieRow: React.FC<IMovieRow> = ({movie, cutPos = 70}: IMovieRow) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/posters\", `${movie.id}.jpg`, ESize.Small);\r\n    const [imgClass, setImgClass] = useState(\"\");\r\n    const [summary] = useCutter(movie.summary, cutPos);\r\n    useEffect(()=>{\r\n        if(movie.avgScore > 6){\r\n            setImgClass(\"high-poster\");\r\n        } else if(movie.avgScore > 3){\r\n            setImgClass(\"medium-poster\");\r\n        } else if(movie.avgScore > 0) {\r\n            setImgClass(\"low-poster\");\r\n        } else {\r\n            setImgClass(\"\");\r\n        }\r\n        if(window.screen.width > 600){\r\n\r\n        }\r\n    }, [movie]);\r\n    return (\r\n        <Link className=\"movie-row-grid\" to={`/rewer/movie?movieId=${movie.id}`}>\r\n            <img className={imgClass} src={imgsrc} alt={`poster-${movie.id}`} title={movie.title} onError={onImgError} />\r\n            <div>\r\n                <p className=\"row-title\">{movie.title}</p>\r\n                <p className=\"summary\">{summary}</p>\r\n            </div>\r\n            {(new Date(movie.releaseDate) <= new Date()) ? \r\n            (<Score value={movie.avgScore} />) ? (movie.releaseDate == null) : \r\n            (<p></p>) :\r\n            (<p className=\"movie-row-date\">{normalFormat(movie.releaseDate.toString())}</p>)\r\n            }\r\n        </Link>\r\n    )\r\n}\r\n","import React, {useState, useRef, useEffect } from 'react'\r\nimport { IPreviewSeries } from '../../../common/series';\r\nimport { useImage } from '../../hooks';\r\nimport \"../movie/movieStyle.css\";\r\n\r\ninterface ISeriesDiv{\r\n    series: IPreviewSeries;\r\n}\r\n\r\nexport const SeriesDiv: React.FC<ISeriesDiv> = ({series}: ISeriesDiv) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/seriesposters\", `${series.id}.jpg`);\r\n    const [imgClass, setImgClass] = useState(\"\");\r\n    const [scoreClass, setScoreClass] = useState(\"\");\r\n    const scoreLine = useRef<HTMLDivElement>();\r\n\r\n    useEffect(()=>{\r\n        if(series.avgScore > 6){\r\n            setImgClass(\"high-poster\");\r\n            setScoreClass(\"high\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else if(series.avgScore > 3){\r\n            setImgClass(\"medium-poster\");\r\n            setScoreClass(\"medium\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else if(series.avgScore > 0){\r\n            setImgClass(\"low-poster\");\r\n            setScoreClass(\"low\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else {\r\n            scoreLine.current.style.display = \"none\";\r\n        }\r\n    }, [series]);\r\n    \r\n    return (\r\n        <div className=\"movie-container fade\">            \r\n            <img className={imgClass} src={imgsrc} alt={`${series.title}-poster`} onError={onImgError} />                \r\n            <p className=\"movie-title\">{series.title}</p>\r\n            <div ref={scoreLine} className={scoreClass} >\r\n                <p className=\"score-line\">{ Math.round(series.avgScore * 10)/10}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SeriesDiv;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { IPreviewSeries } from '../../../common/series';\r\nimport { getCaller } from '../../callers/caller';\r\nimport { seriesPath } from '../../callers/seriesCaller';\r\nimport SeriesDiv from './SeriesDiv';\r\n\r\ninterface IFeaturedSeriesSides{\r\n   // series: ISeries[];\r\n}\r\n\r\nexport const FeaturedSeriesSides: React.FC<IFeaturedSeriesSides> = () => {\r\n    const [featueredSeries, setFeaturedSeries] = useState([]);\r\n    const [seriesCaller, signal] = getCaller(seriesPath.selectLatestPreviewSeriesJson);\r\n    useEffect(()=>{\r\n        requestFeaturedSeries();\r\n        return ()=>{\r\n            signal.abort();\r\n        }\r\n    }, []);\r\n\r\n    async function requestFeaturedSeries(){\r\n        const featured: IPreviewSeries[] = await seriesCaller();\r\n        if(featured){\r\n            setFeaturedSeries(featured.slice(0, 2)); //majd random lesz elég adattal\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"center-text\">Featured Series</h3>\r\n                <div className=\"double-grid\">\r\n                    {featueredSeries.map(f=> {\r\n                        return (<Link key={`featured-${f.id}`} to={`/rewer/series?seriesId=${f.id}`}>\r\n                                    <SeriesDiv series={f} />\r\n                                </Link>)\r\n                    })}\r\n                </div>  \r\n        </div>\r\n    )\r\n}\r\nexport default FeaturedSeriesSides;","import React from 'react'\r\nimport { Link } from \"react-router-dom\"\r\n\r\ninterface ILoginMsg{\r\n    message: string;\r\n}\r\n\r\nexport const LoginMsg: React.FC<ILoginMsg> = ({message}: ILoginMsg) => {\r\n    return (\r\n    <p>You must be <Link to=\"/rewer/profile\">logged in</Link> {message}</p>\r\n    )\r\n}\r\n\r\nexport default LoginMsg;","import React, { useRef } from 'react'\r\nimport { EReviewOrderBy } from '../../callers/reviewCaller';\r\n\r\ninterface IReviewOrderBySelect{\r\n   defaultValue: EReviewOrderBy;\r\n   onUpdate: (newValue: EReviewOrderBy) => void;\r\n}\r\n\r\nexport const ReviewOrderBySelect: React.FC<IReviewOrderBySelect> = ({defaultValue, onUpdate}: IReviewOrderBySelect) => {\r\n    const select = useRef<HTMLSelectElement>();\r\n    function update(){\r\n        onUpdate(EReviewOrderBy[select.current.value]);\r\n    }\r\n    return (\r\n        <select ref={select} onChange={update} value={defaultValue}>\r\n            <option value={EReviewOrderBy.popIndex}>Most popular</option>\r\n            <option value={EReviewOrderBy.date}>Latest</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default ReviewOrderBySelect;\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\n\r\ninterface IScore{\r\n    value: number;\r\n}\r\n\r\nexport const MainScore: React.FC<IScore> = ({value}: IScore) => {\r\n    const [scoreClass, setScoreClass] = useState(\"score\");\r\n    useEffect(()=>{\r\n         if(value > 6){\r\n            setScoreClass(\"main-score high\");\r\n        } else if(value > 3){\r\n            setScoreClass(\"main-score\");\r\n        } else if(value > 0) {\r\n            setScoreClass(\"main-score low\");\r\n        } else {\r\n            setScoreClass(\"main-score unset\");\r\n        }\r\n    }, [value]);\r\n    return (\r\n        <div className={scoreClass}>\r\n            <p>{Math.round(value * 10)/10 === 0 ?\r\n                (<Fragment>X</Fragment>):\r\n                (<Fragment>{Math.round(value * 10)/10}</Fragment>)}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainScore;","import React, { Fragment } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { IMovie } from '../../../common/movie';\r\nimport { getDay, getMonth, getYear } from '../../dateParser'\r\nimport { ESize, useImage } from '../../hooks';\r\nimport MainScore from './MainScore'\r\nimport \"./movieStyle.css\";\r\n\r\ninterface IMovieInfo{\r\n    movie: IMovie;\r\n}\r\n\r\nexport const MovieInfo: React.FC<IMovieInfo> = ({movie}) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/posters\", `${movie.id}.jpg`, ESize.Normal);\r\n    return (\r\n        <div>\r\n            <div className=\"title-grid\">\r\n                <p className=\"title\">{movie.title}</p>\r\n                <MainScore value={movie.avgScore} />\r\n            </div>\r\n            <div>\r\n            { parseInt(localStorage.getItem(\"permission\")) > 1 ?\r\n                    (<Link to={`/rewer/editmovie?movieId=${movie.id}`} >Edit this movie's page</Link>) : \r\n                    (<Fragment></Fragment>)\r\n                    }\r\n            </div>                     \r\n            {(movie.genres != null)?\r\n            (movie.genres.map(g=> {\r\n                return <Link key={`genre-${g.id}`} className=\"genre\" to={\"todo\"}>{g.genreName}</Link>\r\n            })):\r\n            (<Fragment></Fragment>)\r\n            }\r\n        \r\n            <div className=\"movie-info-grid\">               \r\n                <div className=\"movie-info-grid-item\">\r\n                    <p>{movie.summary}</p>\r\n                    <p>Premier: {`${getDay(movie.releaseDate.toString())} ${getMonth(movie.releaseDate.toString())}  ${getYear(movie.releaseDate.toString())}`}</p>\r\n                    <p>Runtime: {`${movie.runtime} minutes`}</p>\r\n                    <p>Directed by: </p>\r\n                    <ul>\r\n                        {movie.casts.filter(c=> c.castTypeId === 1).map(m=>{\r\n                            return <li key={`director-link-${m.artistId}`} ><Link className=\"star\" to={`/rewer/star?artistId=${m.artistId}`} title={m.name} >{m.artistName}</Link></li>\r\n                        })}\r\n                    </ul>\r\n                    <p>Written by: </p>\r\n                    <ul>\r\n                        {movie.casts.filter(c=> c.castTypeId === 3).map(m=> {\r\n                            return <li key={`director-link-${m.artistId}`}><Link className=\"star\" to={`/rewer/star?artistId=${m.artistId}`} title={m.name} >{m.artistName}</Link><br/></li>\r\n                        })} \r\n                    </ul>                        \r\n                </div>\r\n                {window.screen.width > 800 ?\r\n                (<img src={imgsrc} onError={onImgError} className=\"poster\" title={movie.title} alt={`${movie.title}-poster`} />):\r\n                (<Fragment></Fragment>)}\r\n                   \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default MovieInfo;\r\n"],"sourceRoot":""}