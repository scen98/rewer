{"version":3,"sources":["components/artist/StarInfo.tsx","components/cast/ArtistCastRow.tsx","components/cast/ArtistCastList.tsx","components/cast/ArtistSeriesCastRow.tsx","components/cast/ArtistSeriesCastList.tsx","pages/Star.tsx","hooks.tsx","dateParser.ts","callers/movieCaller.ts","components/movie/Score.tsx","callers/castCaller.ts","callers/seriesCaller.ts","components/movie/MovieRow.tsx","components/movie/MovieDiv.tsx","components/series/SeriesDiv.tsx","components/movie/FeaturedSides.tsx","components/movie/MovieRowList.tsx","components/series/FeaturedSeriesSides.tsx","callers/search.ts","components/movie/GenreSelect.tsx","components/AutoCompleteElement.tsx","components/AutoCompleteInput.tsx","callers/artistCaller.ts","components/SearchSide.tsx","components/movie/GenreSide.tsx","components/movie/TopRatedSides.tsx"],"names":["StarInfo","artist","useState","died","setDied","deathInfo","normalFormat","deathDate","toString","deathPlace","useCutter","bio","isBioCut","cutBio","useEffect","useImage","id","imgsrc","onError","window","screen","width","className","name","parseInt","localStorage","getItem","to","onClick","length","src","alt","birthDate","birthPlace","ArtistCastRow","cast","castName","setCastName","movieId","ESize","Small","onImgError","castTypeId","castTypeName","movieName","movieTitle","getYear","movieDate","ArtistCastList","casts","map","c","key","ArtistSeriesCastRow","seriesId","seriesTitle","firstEpisodeDate","ArtistSeriesCastList","Star","getParameter","movieCasts","seriesCasts","setArtist","postCaller","artistPath","selectDetailedArtist","artistCaller","signal","a","detailedArtist","alert","document","body","scrollTop","documentElement","requestArtist","abort","title","Math","random","FeaturedSides","FeaturedSeriesSides","GenreSide","SearchSide","TopRatedSides","useAsyncReference","value","ref","useRef","forceRender","newState","Object","is","current","s","useBinder","get","set","event","target","useAsyncBinder","updateState","defaultText","defaultCutPos","getCutText","firstText","firstCut","isCut","setIsCut","outputText","setOutputText","cut","text","cutPos","newText","didCut","toCut","substring","onEnter","callback","useScroll","pos","newPos","position","listener","innerHeight","scrollY","offsetHeight","addEventListener","removeEventListener","path","fileName","size","Normal","tryAgain","imgSrc","setImgSrc","tryAgainRef","imgSrcSetter","newPath","newFileName","parseDateYYYYMMDD","date","getFullYear","monthNames","getMonth","getDate","Date","getDay","d","parseForInput","month","day","moviePath","selectDetailedMovie","selectLatestMovies","selectLatestMoviesJson","selectLatestMoviesByGenre","selectMoviesByScore","getGenres","insertMovie","updateMovie","deleteMovie","uploadPoster","insertMovieGenre","deleteMovieGenre","selectUpcomingMovies","selectUpcomingMoviesJson","file","UploadFile","ok","compareMovieGenresByName","genre1","genre2","genreName","localeCompare","Score","scoreClass","setScoreClass","round","castPath","getCastTypes","insertCast","insertCasts","updateCast","deleteCast","compareCastType","cast1","cast2","seriesPath","insertSeries","updateSeries","uploadSeriesPoster","selectDetailedSeries","selectLatestPreviewSeries","selectLatestPreviewSeriesJson","insertSeriesGenre","deleteSeriesGenre","selectDetailedSeriesPostFetch","detailedSeries","genres","sort","series","seasons","orderSeasonCast","orderCasts","episodes","compareEpisodes","getSeasonCount","filter","getEpisodeCount","sum","forEach","season","getFirstEpisodeDate","releaseDate","getAvgRuntime","epCount","episode","runtime","getSeriesCast","seriesCast","setSeriesCastFromSeason","getAvgSeriesScore","reviewedEpisodeCount","avgScore","setSeriesCastFromEpisode","setSeriesCastFromCast","sc","find","artistId","updatedNames","characterNames","push","episodeCount","handleExistingSeriesCast","artistName","episode1","episode2","MovieRow","movie","imgClass","setImgClass","summary","MovieDiv","Medium","scoreLine","style","display","SeriesDiv","featuredMovies","setFeaturedMovies","getCaller","caller","movies","rnd","floor","slice","getLatestFeatures","f","MovieRowList","m","featueredSeries","setFeaturedSeries","seriesCaller","featured","requestFeaturedSeries","searchPath","search","autoComplete","GenreSelect","setSelectedGenre","selectedGenre","any","setGenres","onChange","e","g","AutoCompleteElement","selectedValue","mainClass","setMainClass","AutoCompleteInput","setValue","stringList","onSubmit","requestAutoComplete","showAutoComplete","setShowAutoComplete","selected","setSelected","wrapperRef","addClickListener","removeClickListener","handleClickOutside","contains","keyCode","String","fromCharCode","toLowerCase","handleUpArrow","currentIndex","indexOf","handleDownArrow","placeholder","onKeyDown","keycode","onDivKeyDown","type","list","icon","faSearch","selectArtistsByKeyword","insertArtist","updateArtist","uploadPortrait","keyword","setKeyword","autoList","setAutoList","autoCaller","history","useHistory","word","limit","newAutos","searchParam","setMovies","genreCaller","genreSignal","genreId","offset","movieCaller","movieSignal","allGenres","requestGenres","requestMovies","topRateds","setTopRateds","min","callTopRated","tops","getTopRateds","t"],"mappings":"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","file":"static/js/5.457a0463.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { Fragment, useState, useEffect } from 'react'\r\nimport { normalFormat } from '../../dateParser'\r\nimport { Link } from \"react-router-dom\"\r\nimport { IDetailedArtist } from '../../../common/artist';\r\nimport { useCutter, useImage } from '../../hooks';\r\nimport \"./artistStyle.css\"\r\n\r\ninterface IStarInfo{\r\n    artist: IDetailedArtist;\r\n}\r\n\r\nexport const StarInfo: React.FC<IStarInfo> = ({artist}: IStarInfo) => {\r\n    const [died, setDied] = useState(null);\r\n    const charCount = 1200;\r\n    const deathInfo = \r\n    <Fragment>\r\n        <p>Died: <i>{`${normalFormat(artist.deathDate.toString())},`}</i></p>\r\n        <p><i>{artist.deathPlace}</i></p>\r\n    </Fragment>;\r\n    const [bio, isBioCut, cutBio] = useCutter(artist.bio, charCount);\r\n    useEffect(()=>{\r\n        if(artist.deathPlace != null && artist.deathPlace !== \"\"){\r\n            setDied(deathInfo);\r\n        } else {\r\n            setDied(<Fragment></Fragment>);\r\n        }\r\n    }, [artist]);\r\n\r\n    const [imgsrc, onError] = useImage(\"/rewer/uploads/portraits\", `${artist.id}.jpg`);\r\n\r\n    useEffect(()=>{\r\n        cutBio(artist.bio, charCount);\r\n    }, [artist]);\r\n\r\n    return (\r\n        <div>\r\n        {window.screen.width > 600 ? \r\n        (<div className=\"info-grid\">\r\n                <div className=\"info-grid-item\">\r\n                    <h2>{artist.name}</h2>\r\n                    <p>\r\n                    {parseInt(localStorage.getItem(\"permission\")) > 1 ?\r\n                    (<Link to={`/rewer/editartist?artistId=${artist.id}`}>Edit this star's page</Link>) : \r\n                    (<Fragment></Fragment>)}\r\n                    </p>\r\n                    {bio}\r\n                    {(isBioCut)?\r\n                    (<Fragment><p onClick={()=>{  cutBio(artist.bio) }} className=\"show-more\">Show more</p></Fragment>):\r\n                    (<Fragment>\r\n                        {(artist.bio.length > charCount)? \r\n                        (<Fragment><p onClick={ ()=>{ cutBio(artist.bio, charCount) } } className=\"show-more\">Show less</p></Fragment>):\r\n                        (<Fragment></Fragment>)}</Fragment>)\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <img className=\"info-portrait\" src={imgsrc} onError={onError} alt={`${artist.name}_portrait`} />\r\n                    <p>Born: <i>{`${normalFormat(artist.birthDate.toString())},`}</i></p>\r\n                    <p><i>{artist.birthPlace}</i></p>  \r\n                    {(artist.deathPlace != null && artist.deathPlace !== \"\")?\r\n                    (<Fragment>\r\n                        <p>Died: <i>{`${normalFormat(artist.deathDate.toString())},`}</i></p>\r\n                        <p><i>{artist.deathPlace}</i></p>\r\n                    </Fragment>):\r\n                    (<Fragment></Fragment>)}\r\n                </div>\r\n            </div>) :\r\n            (<div className=\"info-grid-item\">\r\n                <h2>{artist.name}</h2>\r\n                <p>\r\n                    {parseInt(localStorage.getItem(\"permission\")) > 1 ?\r\n                    (<Link to={`/rewer/editartist?artistId=${artist.id}`}>Edit this star's page</Link>) : \r\n                    (<Fragment></Fragment>)\r\n                    }\r\n                </p>\r\n                <img className=\"info-portrait\" src={imgsrc} onError={onError} alt={`${artist.name}_portrait`} />\r\n                <p>Born: <i>{`${normalFormat(artist.birthDate.toString())},`}</i></p>\r\n                <p><i>{artist.birthPlace}</i></p>  \r\n                {died}\r\n                {(isBioCut)?\r\n                    (<Fragment><p onClick={()=>{  cutBio(artist.bio) }} className=\"show-more\">Show more</p></Fragment>):\r\n                    (<Fragment>\r\n                        {(artist.bio.length > charCount)? \r\n                        (<Fragment><p onClick={ ()=>{ cutBio(artist.bio, charCount) } } className=\"show-more\">Show less</p></Fragment>):\r\n                        (<Fragment></Fragment>)}</Fragment>)\r\n                    }\r\n            </div>\r\n           )\r\n           }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { IMovieCast } from '../../../common/cast';\r\nimport { getYear } from '../../dateParser'\r\nimport { ESize, useImage } from '../../hooks';\r\ninterface IArtistCastRow{\r\n    cast: IMovieCast;\r\n}\r\nexport const ArtistCastRow: React.FC<IArtistCastRow> = ({cast}: IArtistCastRow)=> {\r\n    const [castName, setCastName] = useState<string>(cast.name);\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/posters\", `${cast.movieId}.jpg`, ESize.Small);\r\n    useEffect(()=>{\r\n        if(cast.castTypeId > 3){\r\n            setCastName(cast.name);\r\n        } else {\r\n           setNonActor();\r\n        }\r\n        function setNonActor(){\r\n        if(cast.name === \"\"){\r\n            setCastName(cast.castTypeName);\r\n        } else {\r\n            setCastName(`${cast.castTypeName} (${cast.name})`);\r\n        }\r\n    }\r\n    }, [cast]);\r\n        \r\n    return (\r\n        <div>\r\n            <div className=\"cast-row\">\r\n            <img src={imgsrc} onError={onImgError} alt={cast.movieName} />\r\n            <span><Link to={`/rewer/movie?movieId=${cast.movieId}`} >{`${cast.movieTitle} (${getYear(cast.movieDate)})`}</Link></span>\r\n            <p>{castName}</p>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArtistCastRow;\r\n","import React from 'react'\r\nimport { IMovieCast } from '../../../common/cast'\r\nimport ArtistCastRow from './ArtistCastRow'\r\nimport \"./castStyle.css\"\r\n\r\ninterface IArtistCastList{\r\n    casts: IMovieCast[];\r\n}\r\n\r\nexport const ArtistCastList: React.FC<IArtistCastList> = ({casts}: IArtistCastList) => {\r\n    return (\r\n        <div>\r\n            {casts.map(c=>{\r\n                return <ArtistCastRow key={`artist-cast-${c.id}`} cast={c} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArtistCastList;","import React, { useState, useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { getYear } from '../../dateParser'\r\nimport { ISeriesCast } from '../../../common/cast'\r\nimport { ESize, useImage } from '../../hooks'\r\ninterface IArtistSeriesCastRow{\r\n    cast: ISeriesCast;\r\n}\r\nexport const ArtistSeriesCastRow: React.FC<IArtistSeriesCastRow> = ({cast}: IArtistSeriesCastRow)=> {\r\n    const [castName, setCastName] = useState(cast.name);\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/seriesposters\", `${cast.seriesId}.jpg`, ESize.Small);\r\n    useEffect(()=>{\r\n        if(cast.castTypeId > 3){\r\n            setCastName(cast.name);\r\n        } else {\r\n           setNonActor();\r\n        }\r\n        function setNonActor(){\r\n        if(cast.name === \"\"){\r\n            setCastName(cast.castTypeName);\r\n        } else {\r\n            setCastName(`${cast.castTypeName} (${cast.name})`);\r\n        }\r\n    }\r\n    }, [cast]);\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"cast-row\">\r\n            <img src={imgsrc} onError={onImgError} alt={cast.movieName} />\r\n            <span><Link to={`/rewer/series?seriesId=${cast.seriesId}`} >{`${cast.seriesTitle} (${getYear(cast.firstEpisodeDate)})`}</Link></span>\r\n            <p>{castName}</p>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArtistSeriesCastRow;\r\n","import React from 'react'\r\nimport { ISeriesCast } from '../../../common/cast'\r\nimport ArtistSeriesCastRow from './ArtistSeriesCastRow'\r\n\r\ninterface IArtistSeriesCastList{\r\n    casts: ISeriesCast[];\r\n}\r\n\r\nexport const ArtistSeriesCastList: React.FC<IArtistSeriesCastList> = ({casts}: IArtistSeriesCastList) => {\r\n    return (\r\n        <div>\r\n            {casts.map(c=>{\r\n                return <ArtistSeriesCastRow key={`artist-cast-${c.id}`} cast={c} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArtistSeriesCastList;","import React, { useState, useEffect, Fragment } from 'react'\r\nimport { IDetailedArtist } from '../../common/artist';\r\nimport { artistPath } from '../callers/artistCaller';\r\nimport { postCaller } from '../callers/caller';\r\nimport { StarInfo } from '../components/artist/StarInfo';\r\nimport ArtistCastList from '../components/cast/ArtistCastList';\r\nimport ArtistSeriesCastList from '../components/cast/ArtistSeriesCastList';\r\nimport FeaturedSides from '../components/movie/FeaturedSides';\r\nimport GenreSide from '../components/movie/GenreSide';\r\nimport TopRatedSides from '../components/movie/TopRatedSides';\r\nimport SearchSide from '../components/SearchSide';\r\nimport FeaturedSeriesSides from '../components/series/FeaturedSeriesSides';\r\nimport { getParameter } from '../urlManager';\r\n\r\nexport default function Star() {\r\n    const [artist, setArtist] = useState<IDetailedArtist>({id: parseInt(getParameter(\"artistId\")), name: \"\", birthPlace: \"\", birthDate: \"\", deathPlace: \"\", deathDate: \"\", bio: \"\", movieCasts: [], seriesCasts: []});\r\n    const [artistCaller, signal] = postCaller({ id: artist.id }, artistPath.selectDetailedArtist);\r\n    \r\n    useEffect(()=>{\r\n        document.body.scrollTop = 0;\r\n        document.documentElement.scrollTop = 0;\r\n        async function requestArtist(){\r\n            const detailedArtist: IDetailedArtist = await artistCaller();\r\n            if(detailedArtist){\r\n                setArtist(detailedArtist);\r\n            } else {\r\n                alert(\"Server error.\");\r\n            }\r\n        }\r\n        requestArtist();\r\n        return ()=>{\r\n            signal.abort();\r\n        }\r\n    }, []);\r\n    \r\n    useEffect(()=>{\r\n        if(artist) document.title = `${artist.name} - Rewer`;\r\n    }, [artist]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {window.screen.width > 1100 ?\r\n            (<div className=\"main-grid\">\r\n                <div className=\"left-item\">\r\n                    <div className=\"side-container large-side\">\r\n                       {Math.random() > 0.5 ?\r\n                       (<FeaturedSides />):                        \r\n                       (<FeaturedSeriesSides />)}\r\n                    </div>\r\n                    <div className=\"side-container medium-side\">\r\n                        <GenreSide length={5} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"main-item\">\r\n                    <StarInfo artist={artist} />\r\n                    <ArtistCastList casts={artist.movieCasts} />\r\n                    <ArtistSeriesCastList casts={artist.seriesCasts} />\r\n                </div>\r\n                <div className=\"right-item\">\r\n                    <div className=\"side-container medium-side\">\r\n                        <SearchSide />\r\n                    </div>\r\n                    <div className=\"side-container medium-side\">\r\n                        <TopRatedSides />\r\n                    </div>\r\n                </div>\r\n            </div>):\r\n            (<div className=\"main-container\">\r\n                <StarInfo artist={artist} />\r\n                <ArtistCastList casts={artist.movieCasts} />\r\n            </div>)    \r\n        } \r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n","import { useState, useRef } from \"react\";\r\nexport function useAsyncReference<T>(value: T) {\r\n    const ref = useRef(value);\r\n    const [, forceRender] = useState(false);\r\n    const updateState = (newState) => {\r\n        if (!Object.is(ref.current, newState)) {\r\n            ref.current = newState;\r\n            forceRender(s => !s);\r\n        }\r\n    }\r\n    return [ref, updateState] as const;\r\n}\r\n\r\nexport function useBinder<T>(value: T){\r\n    const [get, set] = useState<T>(value);\r\n    const bind = (event)=>{\r\n        set({...get, [event.target.name]: event.target.value});\r\n    }\r\n    return [get, set, bind] as const;\r\n}\r\n\r\nexport function useAsyncBinder<T>(value: T){\r\n    const ref = useRef(value);\r\n    const [, forceRender] = useState(false);\r\n    const updateState = (newState) => {\r\n        if (!Object.is(ref.current, newState)) {\r\n            ref.current = newState;\r\n            forceRender(s => !s);\r\n        }\r\n    }\r\n    const bind = (event) => {\r\n        updateState({...ref.current, [event.target.name]: event.target.value});\r\n    }\r\n    return [ref, updateState, bind] as const;\r\n}\r\n\r\nexport function useCutter(defaultText: string, defaultCutPos = 0): readonly [string, boolean, (text: string, custPos?: number)=>void]{\r\n    const [firstText, firstCut] = getCutText(defaultText, defaultCutPos > 0, defaultCutPos);\r\n    const [isCut, setIsCut] = useState(firstCut);\r\n    const [outputText, setOutputText] = useState(firstText);\r\n\r\n    const cut = (text: string, cutPos = 0) => {\r\n        const [newText, didCut] = getCutText(text, cutPos > 0, cutPos);\r\n        setOutputText(newText);\r\n        setIsCut(didCut);\r\n    }\r\n\r\n    return [outputText, isCut, cut] as const;\r\n}\r\n\r\nfunction getCutText(text: string, toCut: boolean, cutPos: number): [string, boolean]{\r\n    if(toCut && text.length > cutPos){\r\n        return [text.substring(0, cutPos) + \"...\", true];\r\n    }\r\n    return [text, false];\r\n}\r\n\r\nexport function setBinder(event, object, setter: (any)=> void){\r\n    setter({...object.current, [event.target.name]: event.target.value});\r\n}\r\n\r\nexport function onEnter(event, callback){\r\n    if (event.key === 'Enter') {\r\n        callback();\r\n    }\r\n}\r\n\r\nexport function useScroll(pos: number, callback: ()=> any): readonly [()=>void, ()=>void]{ \r\n    let newPos = pos;\r\n    if(pos > 1 || pos < 0) newPos = 0.8;\r\n    const position = useRef(newPos);\r\n    const listener = ()=>{\r\n        if((window.innerHeight + window.scrollY) >= (document.body.offsetHeight*position.current)){\r\n            callback();\r\n        }\r\n    }\r\n    const addListener = () =>{\r\n        window.addEventListener(\"scroll\", listener);\r\n    }\r\n    const removeListener = ()=>{\r\n        window.removeEventListener(\"scroll\", listener);\r\n    }\r\n    return [addListener, removeListener] as const;\r\n}\r\n\r\nexport enum ESize{\r\n    Normal = \"\",\r\n    Medium = \"medium-\",\r\n    Small = \"small-\",\r\n}\r\n\r\nexport function useImage(path: string, fileName: string, size = ESize.Normal, tryAgain = false){\r\n    const [imgSrc, setImgSrc] = useState<string>(`${path}/${size}${fileName}`);\r\n    const tryAgainRef = useRef(tryAgain);\r\n    const onError= () =>{\r\n        if(tryAgainRef.current){\r\n            setImgSrc(`${path}/${ESize.Normal}${fileName}`);\r\n            tryAgainRef.current = false;\r\n        } else {\r\n            setImgSrc(`${path}/${size}0.jpg`);\r\n        }\r\n    }\r\n    const imgSrcSetter = (newPath: string, newFileName: string) => {\r\n        setImgSrc(`${newPath}/${size}${newFileName}`);\r\n    }\r\n    return [imgSrc, onError, imgSrcSetter] as const;\r\n}\r\n\r\nexport interface IWindowState{\r\n    name: string;\r\n    maxValue: number;\r\n}\r\n\r\nexport function useWidth(defWindowStates: IWindowState[]){\r\n    const windowsStates = useRef(defWindowStates.sort(compareWindowStates));\r\n    const [currentWindowState, setCurrentWindowState] = useState(windowsStates.current.find(w=> w.maxValue > window.innerWidth));\r\n    const listen = ()=>{\r\n        window.addEventListener(\"resize\", ()=>{\r\n            windowStateSetter();\r\n        });\r\n    }\r\n    const cleanUpListener = ()=>{\r\n        window.removeEventListener(\"resize\", ()=>{\r\n            windowStateSetter();\r\n        });\r\n    }\r\n    const windowStateSetter = ()=>{\r\n        setCurrentWindowState(windowsStates.current.find(w=> w.maxValue > window.innerWidth));\r\n    }\r\n    return [currentWindowState, listen, cleanUpListener] as const;\r\n}\r\n\r\nfunction compareWindowStates(wstate1: IWindowState, wstate2: IWindowState){\r\n    if(wstate1.maxValue < wstate2.maxValue) return -1;\r\n    if(wstate1.maxValue > wstate2.maxValue) return 1;\r\n    return 0;\r\n}","export function parseDateHun(date: Date): string{\r\n    return `${date.getFullYear()}. ${monthNames[date.getMonth()]} ${date.getDate()}. ${parseDatehhdd(date)}`;\r\n}\r\n\r\nexport function parseDateYYYYMMDD(date: Date):string{\r\n    return `${date.getFullYear()}. ${monthNames[date.getMonth()]} ${date.getDate()}`;\r\n}\r\n\r\nexport function parseDatehhdd(date: Date):string{\r\n    if(date.getMinutes() < 10){\r\n        return `${date.getHours()}:0${date.getMinutes()}`;\r\n    } else {\r\n        return `${date.getHours()}:${date.getMinutes()}`;\r\n    }\r\n}\r\n\r\nexport function getYear(date: string){\r\n    return new Date(date).getFullYear();\r\n}\r\n\r\nexport function getMonth(date: string){\r\n    return monthNames[new Date(date).getMonth()]; \r\n}\r\n\r\nexport function getDay(date: string){\r\n    return new Date(date).getDate();\r\n}\r\n\r\nexport function normalFormat(date: string): string{\r\n    let d = new Date(date);\r\n    return `${d.getDate()} ${monthNames[d.getMonth()]} ${d.getFullYear()}`;\r\n}\r\n\r\nexport function parseForInput(date: Date): string{\r\n    let month: string;\r\n    let day: string;\r\n    if(date.getMonth() < 9){\r\n        month = `0${date.getMonth()+1}`;\r\n    } else {\r\n        month = (date.getMonth()+1).toString();\r\n    }\r\n    if(date.getDate() < 10){\r\n        day = `0${date.getDate()}`;\r\n    } else {\r\n        day = date.getDate().toString();\r\n    }\r\n\r\n    return `${date.getFullYear()}-${month}-${day}`;\r\n}\r\n\r\nexport let monthNames = [\"Janury\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n","import { IGenre, IMovieGenre, ISeriesGenre } from \"../../common/genre\";\r\nimport { UploadFile } from \"../callers/caller\";\r\n\r\nexport const moviePath = {\r\n    selectDetailedMovie: \"/movie/select_detailed_movie\",\r\n    selectLatestMovies: \"/movie/select_latest_movies\",\r\n    selectLatestMoviesJson: \"/jsondb/latest_movies.json\",\r\n    selectLatestMoviesByGenre: \"/movie/select_latest_movies_by_genre\",\r\n    selectMoviesByScore: \"/movie/select_movies_by_score\",\r\n    getGenres: \"/jsondb/genres.json\",\r\n    insertMovie: \"/movie/insert_movie\",\r\n    updateMovie: \"/movie/update_movie\",\r\n    deleteMovie: \"/movie/delete_movie\",\r\n    uploadPoster: \"/movie/upload_poster\",\r\n    insertMovieGenre: \"/genre/insert_movie_genre\",\r\n    deleteMovieGenre: \"/genre/delete_movie_genre\",\r\n    selectUpcomingMovies: \"/movie/select_upcoming_movies\",\r\n    selectUpcomingMoviesJson: \"/jsondb/upcoming_movies.json\"\r\n}\r\n\r\nexport async function uploadPoster(file: FormData): Promise<boolean>{\r\n    const response = await UploadFile(\"/movie/upload_poster\", file);\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function compareGenresByName(genre1: IGenre, genre2: IGenre){\r\n    return genre1.name.localeCompare(genre2.name);\r\n}\r\n\r\nexport function compareMovieGenresByName(genre1: IMovieGenre | ISeriesGenre, genre2: IMovieGenre | ISeriesGenre){\r\n    return genre1.genreName.localeCompare(genre2.genreName);\r\n}","import React, { useState, useEffect } from 'react'\r\n\r\ninterface IScore{\r\n    value: number;\r\n}\r\n\r\nexport const Score: React.FC<IScore> = ({value}: IScore) => {\r\n    const [scoreClass, setScoreClass] = useState(\"score\");\r\n    useEffect(()=>{\r\n        if(value > 6){\r\n            setScoreClass(\"score high\");\r\n        } else if(value > 3){\r\n            setScoreClass(\"score\");\r\n        } else if(value > 0) {\r\n            setScoreClass(\"score low\");\r\n        } else {\r\n            setScoreClass(\"score unset\");\r\n        }\r\n    }, [value])\r\n    return (\r\n        <div className={scoreClass}>\r\n            <p>{Math.round(value*10) / 10}</p>\r\n        </div>\r\n    )\r\n}\r\n","import { ICast, IMovieCast } from \"../../common/cast\";\r\n\r\nexport const castPath = {\r\n    getCastTypes: \"/jsondb/cast_types.json\",\r\n    insertCast: \"/cast/insert_cast\",\r\n    insertCasts: \"/cast/insert_casts\",\r\n    updateCast: \"/cast/update_cast\",\r\n    deleteCast: \"/cast/delete_cast\"\r\n}\r\n\r\nexport function compareCastType(cast1: ICast, cast2: ICast){\r\n    if(cast1.castTypeId < cast2.castTypeId){\r\n        return -1;\r\n    }\r\n    if(cast1.castTypeId > cast2.castTypeId){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function compareDate(cast1: IMovieCast, cast2: IMovieCast){\r\n    if(new Date(cast1.movieDate) < new Date(cast2.movieDate)){\r\n        return -1;\r\n    }\r\n    if(new Date(cast1.movieDate) > new Date(cast2.movieDate)){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n","import { ICast, ISeriesCast } from \"../../common/cast\";\r\nimport { IMovie } from \"../../common/movie\";\r\nimport { ISeason } from \"../../common/season\";\r\nimport { IDetailedSeries, IPreviewSeries, ISeries, ISeriesGenre } from \"../../common/series\";\r\nimport { POSTAsynch, UploadFile } from \"./caller\";\r\nimport { compareCastType } from \"./castCaller\";\r\nimport { compareMovieGenresByName } from \"./movieCaller\";\r\n\r\nexport const seriesPath = {\r\n    insertSeries:\"/series/insert_series\",\r\n    updateSeries: \"/series/update_series\",\r\n    uploadSeriesPoster: \"/series/upload_series_poster\",\r\n    selectDetailedSeries: \"/series/select_detailed_series\",\r\n    selectLatestPreviewSeries: \"/series/select_latest_preview_series\",\r\n    selectLatestPreviewSeriesJson: \"/jsondb/latest_series.json\", \r\n    insertSeriesGenre: \"/genre/insert_series_genre\",\r\n    deleteSeriesGenre: \"/genre/delete_series_genre\"\r\n}\r\n\r\nexport async function uploadSeriesPoster(file: FormData): Promise<boolean>{\r\n    const response = await UploadFile(\"/series/upload_series_poster\", file);\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function selectDetailedSeriesPostFetch(detailedSeries: IDetailedSeries){\r\n    detailedSeries.genres.sort(compareMovieGenresByName);\r\n    orderCasts(detailedSeries);\r\n    for(let season of detailedSeries.seasons) {\r\n        season.episodes.sort(compareEpisodes);\r\n    }\r\n}\r\n\r\nexport async function selectLatestPreviewSeries(limit: number, offset: number): Promise<IPreviewSeries[] | null >{\r\n    const response = await POSTAsynch(\"/series/select_latest_preview_series\", { limit: limit, offset: offset});\r\n    if(response.ok){\r\n        return await response.json();\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function insertSeriesGenre(seriesGenre: ISeriesGenre): Promise<number | null>{\r\n    const response = await POSTAsynch(\"genre/insert_series_genre\", seriesGenre);\r\n    if(response.ok){\r\n        return (await response.json()).newId;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function deleteSeriesGenre(id: number): Promise<boolean>{\r\n    const response = await POSTAsynch(\"genre/delete_series_genre\", { id: id});\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getSeasonCount(series: ISeries): number{\r\n    return series.seasons.filter(s=> s.episodes.length > 0).length;\r\n}\r\n\r\nexport function getEpisodeCount(series: ISeries): number{\r\n    let sum: number = 0;\r\n    series.seasons.forEach(season => {\r\n        sum += season.episodes.length;\r\n    });\r\n    return sum;\r\n}\r\n\r\n\r\nexport function getFirstEpisodeDate(series: ISeries): string{\r\n    if(series.seasons.length > 0 && series.seasons[0].episodes.length > 0){\r\n        return series.seasons[0].episodes[0].releaseDate;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function getAvgRuntime(series: ISeries): number{\r\n    let epCount: number = getEpisodeCount(series);\r\n    let sum: number = 0;\r\n    for(let season of series.seasons) {\r\n        for(let episode of season.episodes) {\r\n            if(episode.runtime > 0) sum += episode.runtime;\r\n        }\r\n    }\r\n    return sum / epCount;\r\n}\r\n\r\nexport function getSeriesCast(series: ISeries): ISeriesCast[]{\r\n    let seriesCast: ISeriesCast[] = [];\r\n    for(let season of series.seasons) {\r\n        setSeriesCastFromSeason(season, seriesCast);\r\n    }\r\n    return seriesCast;\r\n}\r\n\r\nfunction compareSeriesCastByEpisodeCount(scast1: ISeriesCast, scast2: ISeriesCast){\r\n    if(scast1.episodeCount > scast2.episodeCount){\r\n        return -1;\r\n    }\r\n    if(scast1.episodeCount < scast2.episodeCount){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function getAvgSeriesScore(series: ISeries){\r\n    let reviewedEpisodeCount: number = 0;\r\n    let sum: number = 0;\r\n    for(let season of series.seasons) {\r\n        for(let episode of season.episodes) {\r\n            if(episode.avgScore > 0){\r\n                sum = sum + episode.avgScore;\r\n                reviewedEpisodeCount++;\r\n            } \r\n        }\r\n    }\r\n    return sum / reviewedEpisodeCount;\r\n}\r\n\r\nfunction setSeriesCastFromSeason(season: ISeason, seriesCast: ISeriesCast[]){\r\n    for(let episode of season.episodes) {\r\n        setSeriesCastFromEpisode(episode, seriesCast);\r\n    }\r\n}\r\n\r\nfunction setSeriesCastFromEpisode(episode: IMovie, seriesCast: ISeriesCast[]){\r\n    for(let cast of episode.casts) {\r\n        setSeriesCastFromCast(cast, seriesCast);\r\n    }\r\n}\r\n\r\nfunction setSeriesCastFromCast(cast: ICast, seriesCast: any[]){\r\n    let sc: ISeriesCast = seriesCast.find(a=> a.artistId === cast.artistId);\r\n    if(sc != null){\r\n        handleExistingSeriesCast(cast, sc);\r\n    } else {\r\n        seriesCast.push({ \r\n            artistId: cast.artistId, \r\n            artistName: cast.artistName, \r\n            episodeCount: 1, \r\n            characterNames: [cast.name], \r\n            castTypeId: cast.castTypeId } );\r\n    }\r\n}\r\n\r\nfunction handleExistingSeriesCast(cast: ICast, sc: any){\r\n     let updatedNames = sc.characterNames;\r\n     if(sc.characterNames.filter(a=> a === cast.name).length === 0){\r\n         updatedNames.push(cast.name);\r\n     }\r\n     sc = {...sc, episodeCount: sc.episodeCount++, characterNames: updatedNames };\r\n}\r\n\r\nfunction orderCasts(series: ISeries){\r\n    for(let season of series.seasons) {\r\n        orderSeasonCast(season);\r\n    }\r\n}\r\n\r\nfunction orderSeasonCast(seasons: ISeason){\r\n    for(let episode of seasons.episodes) {\r\n            episode.casts.sort(compareCastType);\r\n    }\r\n}\r\n\r\nexport function compareEpisodes(episode1: IMovie, episode2: IMovie){\r\n    if(new Date(episode1.releaseDate) > new Date(episode2.releaseDate)){\r\n        return 1;\r\n    }\r\n    if(new Date(episode1.releaseDate) < new Date(episode2.releaseDate)){\r\n        return -1;\r\n    }\r\n    if(episode1.releaseDate === episode2.releaseDate){\r\n        if(episode1.id > episode2.id) return 1;\r\n        if(episode1.id < episode2.id) return -1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { Score } from './Score';\r\nimport { normalFormat } from '../../dateParser';\r\nimport { IMovie } from '../../../common/movie';\r\nimport { ESize, useCutter, useImage } from '../../hooks';\r\nimport \"./movieStyle.css\";\r\n\r\ninterface IMovieRow{\r\n    movie: IMovie;\r\n    cutPos?: number;\r\n}\r\n\r\nexport const MovieRow: React.FC<IMovieRow> = ({movie, cutPos = 70}: IMovieRow) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/posters\", `${movie.id}.jpg`, ESize.Small);\r\n    const [imgClass, setImgClass] = useState(\"\");\r\n    const [summary] = useCutter(movie.summary, cutPos);\r\n    useEffect(()=>{\r\n        if(movie.avgScore > 6){\r\n            setImgClass(\"high-poster\");\r\n        } else if(movie.avgScore > 3){\r\n            setImgClass(\"medium-poster\");\r\n        } else if(movie.avgScore > 0) {\r\n            setImgClass(\"low-poster\");\r\n        } else {\r\n            setImgClass(\"\");\r\n        }\r\n        if(window.screen.width > 600){\r\n\r\n        }\r\n    }, [movie]);\r\n    return (\r\n        <Link className=\"movie-row-grid\" to={`/rewer/movie?movieId=${movie.id}`}>\r\n            <img className={imgClass} src={imgsrc} alt={`poster-${movie.id}`} title={movie.title} onError={onImgError} />\r\n            <div>\r\n                <p className=\"row-title\">{movie.title}</p>\r\n                <p className=\"summary\">{summary}</p>\r\n            </div>\r\n            {(new Date(movie.releaseDate) <= new Date()) ? \r\n            (<Score value={movie.avgScore} />) ? (movie.releaseDate == null) : \r\n            (<p></p>) :\r\n            (<p className=\"movie-row-date\">{normalFormat(movie.releaseDate.toString())}</p>)\r\n            }\r\n        </Link>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { IMovie } from '../../../common/movie';\r\nimport { ESize, useImage } from '../../hooks';\r\n\r\ninterface IMovieDiv{\r\n    movie: IMovie;\r\n}\r\n\r\nexport const MovieDiv: React.FC<IMovieDiv> = ({movie}: IMovieDiv) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/posters\", `${movie.id}.jpg`, ESize.Medium, true);\r\n    const [imgClass, setImgClass] = useState(\"\");\r\n    const [scoreClass, setScoreClass] = useState(\"\");\r\n    const scoreLine = useRef<HTMLDivElement>();\r\n    useEffect(()=>{\r\n        if(movie.avgScore > 6){\r\n            setImgClass(\"high-poster\");\r\n            setScoreClass(\"high\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else if(movie.avgScore > 3){\r\n            setImgClass(\"medium-poster\");\r\n            setScoreClass(\"medium\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else if(movie.avgScore > 0){\r\n            setImgClass(\"low-poster\");\r\n            setScoreClass(\"low\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else {\r\n            scoreLine.current.style.display = \"none\";\r\n        }\r\n    }, [movie]);\r\n\r\n    useEffect(()=>{\r\n\r\n    }, [movie])\r\n\r\n    return (\r\n        <div className=\"movie-container fade\">\r\n            <img className={imgClass} src={imgsrc} alt={`${movie.title}-poster`} onError={onImgError} />\r\n            <p className=\"movie-title\">{movie.title}</p>\r\n            <div ref={scoreLine} className={scoreClass} >\r\n                <p className=\"score-line\">{ Math.round(movie.avgScore * 10)/10}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieDiv;","import React, {useState, useRef, useEffect } from 'react'\r\nimport { IPreviewSeries } from '../../../common/series';\r\nimport { useImage } from '../../hooks';\r\nimport \"../movie/movieStyle.css\";\r\n\r\ninterface ISeriesDiv{\r\n    series: IPreviewSeries;\r\n}\r\n\r\nexport const SeriesDiv: React.FC<ISeriesDiv> = ({series}: ISeriesDiv) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/seriesposters\", `${series.id}.jpg`);\r\n    const [imgClass, setImgClass] = useState(\"\");\r\n    const [scoreClass, setScoreClass] = useState(\"\");\r\n    const scoreLine = useRef<HTMLDivElement>();\r\n\r\n    useEffect(()=>{\r\n        if(series.avgScore > 6){\r\n            setImgClass(\"high-poster\");\r\n            setScoreClass(\"high\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else if(series.avgScore > 3){\r\n            setImgClass(\"medium-poster\");\r\n            setScoreClass(\"medium\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else if(series.avgScore > 0){\r\n            setImgClass(\"low-poster\");\r\n            setScoreClass(\"low\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else {\r\n            scoreLine.current.style.display = \"none\";\r\n        }\r\n    }, [series]);\r\n    \r\n    return (\r\n        <div className=\"movie-container fade\">            \r\n            <img className={imgClass} src={imgsrc} alt={`${series.title}-poster`} onError={onImgError} />                \r\n            <p className=\"movie-title\">{series.title}</p>\r\n            <div ref={scoreLine} className={scoreClass} >\r\n                <p className=\"score-line\">{ Math.round(series.avgScore * 10)/10}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SeriesDiv;","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { IDetailedMovie } from '../../../common/movie';\r\nimport { getCaller } from '../../callers/caller';\r\nimport { moviePath } from '../../callers/movieCaller';\r\nimport MovieDiv from './MovieDiv';\r\n\r\nexport default function FeaturedSides() {\r\n    const[featuredMovies, setFeaturedMovies] = useState<IDetailedMovie[]>([]);\r\n    const [caller, signal] = getCaller(moviePath.selectLatestMoviesJson)\r\n    useEffect(()=>{\r\n        getLatestFeatures();\r\n        return ()=>{\r\n            signal.abort();\r\n        }\r\n    }, []);\r\n\r\n    async function getLatestFeatures(){\r\n        const movies: IDetailedMovie[] = await caller();\r\n        const rnd = Math.floor(Math.random()*5);\r\n        if(movies) setFeaturedMovies(movies.slice(rnd, rnd+2)); \r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"center-text\">Featured Films</h3>\r\n                    <div className=\"double-grid\">\r\n                        {featuredMovies.map(f=> {\r\n                            return (<Link key={`featured-${f.id}`} to={`/rewer/movie?movieId=${f.id}`}>\r\n                                        <MovieDiv movie={f} />\r\n                                    </Link>)\r\n                        })}\r\n                    </div>  \r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { IMovie } from '../../../common/movie'\r\nimport { MovieRow } from './MovieRow'\r\n\r\ninterface IMovieRowList{\r\n    movies: IMovie[];\r\n}\r\n\r\nexport const MovieRowList: React.FC<IMovieRowList> = ({movies}: IMovieRowList) => {\r\n    return (\r\n        <div>\r\n            {movies.map(m=>{\r\n                return <MovieRow key={`movie-row-${m.id}`} movie={m} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { IPreviewSeries } from '../../../common/series';\r\nimport { getCaller } from '../../callers/caller';\r\nimport { seriesPath } from '../../callers/seriesCaller';\r\nimport SeriesDiv from './SeriesDiv';\r\n\r\ninterface IFeaturedSeriesSides{\r\n   // series: ISeries[];\r\n}\r\n\r\nexport const FeaturedSeriesSides: React.FC<IFeaturedSeriesSides> = () => {\r\n    const [featueredSeries, setFeaturedSeries] = useState([]);\r\n    const [seriesCaller, signal] = getCaller(seriesPath.selectLatestPreviewSeriesJson);\r\n    useEffect(()=>{\r\n        requestFeaturedSeries();\r\n        return ()=>{\r\n            signal.abort();\r\n        }\r\n    }, []);\r\n\r\n    async function requestFeaturedSeries(){\r\n        const featured: IPreviewSeries[] = await seriesCaller();\r\n        if(featured){\r\n            setFeaturedSeries(featured.slice(0, 2)); //majd random lesz elég adattal\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"center-text\">Featured Series</h3>\r\n                <div className=\"double-grid\">\r\n                    {featueredSeries.map(f=> {\r\n                        return (<Link key={`featured-${f.id}`} to={`/rewer/series?seriesId=${f.id}`}>\r\n                                    <SeriesDiv series={f} />\r\n                                </Link>)\r\n                    })}\r\n                </div>  \r\n        </div>\r\n    )\r\n}\r\nexport default FeaturedSeriesSides;","import { POSTAsynch } from \"./caller\";\r\nimport { ISearchResult } from \"../../common/search\"\r\nexport async function mainSearch(keyword: string, limit: number): Promise<ISearchResult | null>{\r\n    const response = await POSTAsynch(\"/search\", { keyword: keyword, limit: limit});\r\n    if(response.ok){\r\n        return await response.json();\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const searchPath = {\r\n    search: \"/search\",\r\n    autoComplete: \"/auto-complete\"\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { IGenre } from '../../../common/genre';\r\n\r\ninterface IGenreSelect{\r\n    selectedGenre: IGenre;\r\n    setSelectedGenre: (g: IGenre) => void;\r\n    genres: IGenre[];\r\n    any?: boolean;\r\n}\r\n\r\nexport const GenreSelect: React.FC<IGenreSelect> = ({genres, setSelectedGenre, selectedGenre, any}: IGenreSelect)=> {\r\n    const [getGenres, setGenres] = useState([]);\r\n    useEffect(()=>{\r\n        if(any){\r\n            setGenres([{id: 0, name: \"Any\"}, ...genres]);\r\n        } else {\r\n            setGenres(genres);\r\n        }\r\n    }, [genres]);\r\n    return (\r\n        <select value={selectedGenre.id.toString()} onChange={(e)=> { setSelectedGenre(getGenres.find(g=> g.id === parseInt(e.target.value))) }} >\r\n            {getGenres.map(g=> {\r\n                return <option key={`opt${g.id}`} value={g.id}>{g.name}</option>\r\n            })}\r\n        </select>\r\n    )\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\n\r\ninterface IAutoCompleteElement{\r\n    text: string;\r\n    selectedValue: string;\r\n    onClick: (s: string)=>void;\r\n}\r\n\r\nexport const AutoCompleteElement: React.FC<IAutoCompleteElement> = ({text, onClick, selectedValue}: IAutoCompleteElement)=> {\r\n    const [mainClass, setMainClass] = useState(\"\");\r\n    useEffect(()=>{\r\n        if(selectedValue === text){\r\n            setMainClass(\"auto-selected\");\r\n        } else {\r\n            setMainClass(\"\");\r\n        }\r\n    }, [selectedValue])\r\n    return (\r\n        <div className={mainClass} onClick={()=>{ onClick(text) }}>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AutoCompleteElement;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useState, useEffect, Fragment, useRef} from 'react'\r\nimport AutoCompleteElement from './AutoCompleteElement';\r\n\r\ninterface IAutoCompleteInput{\r\n    value: string;\r\n    setValue: (s: string)=>void;\r\n    stringList: string[];\r\n    onSubmit: (selectedValue: string)=>void;\r\n    requestAutoComplete: (s: string)=>any;\r\n}\r\n\r\nexport const AutoCompleteInput: React.FC<IAutoCompleteInput> = ({value, setValue, stringList, onSubmit, requestAutoComplete}: IAutoCompleteInput)=> {\r\n    const [showAutoComplete, setShowAutoComplete] = useState(false);\r\n    const [selected, setSelected] = useState(\"\");\r\n    const wrapperRef = useRef<HTMLDivElement>(); //to handle click outside of the component\r\n\r\n    useEffect(()=>{\r\n        addClickListener();\r\n        return ()=>{\r\n            removeClickListener();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(!showAutoComplete) setSelected(\"\");\r\n    }, [showAutoComplete]);\r\n\r\n    const addClickListener = ()=>{\r\n        window.addEventListener(\"click\", handleClickOutside);\r\n    }\r\n\r\n    const removeClickListener = ()=>{\r\n        window.removeEventListener(\"click\", handleClickOutside);\r\n    }\r\n\r\n    const handleClickOutside = (e)=>{\r\n        if(wrapperRef.current != null && !wrapperRef.current.contains(e.target)){\r\n            setShowAutoComplete(false);\r\n        }\r\n    }\r\n\r\n    const onDivKeyDown = (e)=>{ //it has to be working with keystrokes, since a regular useEffect(,[keyword]) would update too frequently\r\n        if(e.key === \"Enter\"){\r\n            if(showAutoComplete) {\r\n                if(selected !== \"\") {\r\n                    onSubmit(selected);\r\n                    setValue(selected);\r\n                } else {\r\n                    onSubmit(value);\r\n                }\r\n            } else {\r\n                onSubmit(value);\r\n            }\r\n            setShowAutoComplete(false);\r\n        }\r\n        if(e.keyCode === 38){ //up\r\n            if(showAutoComplete && stringList.length > 0) handleUpArrow();\r\n        }\r\n        if(e.keyCode === 40){ //down\r\n            if(showAutoComplete && stringList.length > 0) handleDownArrow();\r\n        }\r\n        if(e.keyCode === 39){ //right\r\n            if(showAutoComplete && stringList.length > 0 && selected !== \"\") {\r\n                setValue(selected);\r\n            }\r\n        }\r\n        if (e.keyCode >= 48 && e.keyCode <= 57) {\r\n            // Number\r\n            autoComplete(e.keyCode);\r\n        } else if (e.keyCode >= 65 && e.keyCode <= 90) {\r\n            // Alphabet upper case\r\n            autoComplete(e.keyCode);\r\n        } else if (e.keyCode >= 97 && e.keyCode <= 122) {\r\n            // Alphabet lower case\r\n            autoComplete(e.keyCode);\r\n        } else if(e.keycode === 32 || e.keycode === 8 || e.keyCode === 46){ //space && backspace && delete\r\n            setShowAutoComplete(true);\r\n            setSelected(\"\");\r\n        }\r\n    }\r\n\r\n    const autoComplete = (keyCode: number)=>{\r\n        setShowAutoComplete(true);\r\n        setSelected(\"\");\r\n        if(value.length > 3) requestAutoComplete(value + String.fromCharCode(keyCode).toLowerCase());\r\n    }\r\n\r\n    const handleUpArrow = ()=>{\r\n        if(selected === \"\"){\r\n            setSelected(stringList[0]);\r\n        } else {\r\n            const currentIndex = stringList.indexOf(selected);\r\n            if(currentIndex !== 0) setSelected(stringList[currentIndex-1]);\r\n        }\r\n    }\r\n\r\n    const handleDownArrow = ()=>{\r\n        if(selected === \"\" && stringList.length > 0){\r\n            setSelected(stringList[0]);\r\n        } else {\r\n            const currentIndex = stringList.indexOf(selected);\r\n            if(currentIndex !== stringList.length-1) setSelected(stringList[currentIndex+1]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div ref={wrapperRef} className=\"autocomplete\" >\r\n            <div className=\"search-grid\">\r\n                <input placeholder=\"Keresés\" className=\"search-input\" autoComplete=\"off\" value={value}  onChange={(e)=>{ setValue(e.target.value); }} onKeyDown={(e)=>{ onDivKeyDown(e); }} onClick={()=>{ setShowAutoComplete(true) }} type=\"text\" list=\"datalist\" />\r\n                <button className=\"search-btn\" onClick={()=>{ onSubmit(value); setShowAutoComplete(false); }}><FontAwesomeIcon icon={faSearch} /></button>\r\n            </div>\r\n            <div className=\"autocomplete-items\">\r\n            {showAutoComplete ? \r\n            (<Fragment>\r\n                {stringList.map(s=>{\r\n                    return <AutoCompleteElement key={`auto-${s}`} text={s} onClick={(s)=>{ setValue(s); setShowAutoComplete(false); onSubmit(s); } } selectedValue={selected} />\r\n                })\r\n             }\r\n            </Fragment> ):\r\n            (<Fragment></Fragment>)}\r\n            </div>                        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AutoCompleteInput;\r\n","export const artistPath = {\r\n    selectArtistsByKeyword: \"/artist/select_artists_by_keyword\",\r\n    selectDetailedArtist: \"/artist/select_detailed_artist\",\r\n    insertArtist: \"/artist/insert_artist\",\r\n    updateArtist: \"/artist/update_artist\",\r\n    uploadPortrait: \"/artist/upload_portrait\"\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { postCaller } from '../callers/caller';\r\nimport { searchPath } from '../callers/search';\r\nimport { useAsyncReference } from '../hooks';\r\nimport AutoCompleteInput from './AutoCompleteInput';\r\n\r\nexport default function SearchSide() {\r\n    const [keyword, setKeyword] = useAsyncReference(\"\");\r\n    const [autoList, setAutoList] = useState<string[]>([]);\r\n    const [autoCaller, signal] = postCaller();\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        return ()=>{\r\n            signal.abort();\r\n        }\r\n    }, []);\r\n\r\n    const requestAutoComplete = async (word: string) =>{\r\n        const newAutos = await autoCaller({ limit: 5, keyword: word }, searchPath.autoComplete);\r\n        if(newAutos){\r\n            setAutoList(newAutos);\r\n        }\r\n    }\r\n\r\n    function search(searchParam: string){\r\n        history.push(`/rewer/search?keyword=${searchParam}`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n             <AutoCompleteInput value={keyword.current} setValue={(s)=>{ setKeyword(s) }} onSubmit={(s)=>{ search(s)}} requestAutoComplete={(s)=>{ requestAutoComplete(s) }} stringList={autoList} />\r\n        </div>\r\n    )\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { IGenre } from '../../../common/genre';\r\nimport { IDetailedMovie } from '../../../common/movie';\r\nimport { getCaller, postCaller } from '../../callers/caller';\r\nimport { moviePath } from \"../../callers/movieCaller\";\r\nimport { GenreSelect } from './GenreSelect';\r\nimport { MovieRowList } from './MovieRowList';\r\n\r\ninterface IGenreSide{\r\n    length: number;\r\n}\r\n\r\nexport const GenreSide: React.FC<IGenreSide> = ({length}: IGenreSide) => {\r\n    const [genres, setGenres] = useState([]);\r\n    const [selectedGenre, setSelectedGenre] = useState({id: 0, name: \"\"});\r\n    const [movies, setMovies] = useState([]);\r\n    const [genreCaller, genreSignal] = getCaller(moviePath.getGenres);\r\n    const [movieCaller, movieSignal] = postCaller({ genreId: selectedGenre.id, limit: length, offset: 0 }, moviePath.selectLatestMoviesByGenre);\r\n    useEffect(()=>{\r\n        requestGenres();\r\n        return ()=>{\r\n            movieSignal.abort();\r\n            genreSignal.abort();\r\n        }\r\n    }, []);\r\n\r\n    async function requestGenres(){\r\n        const allGenres: IGenre[] = await genreCaller();\r\n        if(allGenres){\r\n            setGenres(allGenres);\r\n        }\r\n    }\r\n\r\n    async function requestMovies(){\r\n        const movies: IDetailedMovie[] = await movieCaller()\r\n        if(movies){\r\n            setMovies(movies);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(genres.length > 0){\r\n            setSelectedGenre(genres[Math.floor(Math.random()*genres.length)]);\r\n        }\r\n    }, [genres]);\r\n\r\n    useEffect(()=>{\r\n        if(selectedGenre.id > 0){\r\n            requestMovies();\r\n        }\r\n    }, [selectedGenre]);\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"center-text\">Fresh of \r\n                <GenreSelect selectedGenre={selectedGenre} genres={genres} setSelectedGenre={(g)=> { setSelectedGenre(g) }} />\r\n            </h3>\r\n            <MovieRowList movies={movies.map(m=> { return {...m, summary: \"\"} })} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GenreSide;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect, Fragment} from 'react'\r\nimport { IDetailedMovie, WSelectMoviesByScoreRequest } from '../../../common/movie';\r\nimport { postCaller } from '../../callers/caller';\r\nimport { moviePath } from '../../callers/movieCaller';\r\nimport { MovieRow } from './MovieRow'\r\n\r\nexport default function TopRatedSides() {\r\n    const[topRateds, setTopRateds] = useState([]);\r\n    const request: WSelectMoviesByScoreRequest = {\r\n        min: 7,\r\n        limit: 4,\r\n        offset: 0\r\n    }\r\n    const [callTopRated, signal] = postCaller(request, moviePath.selectMoviesByScore);\r\n    useEffect(()=>{\r\n        async function getTopRateds(){\r\n            const tops: IDetailedMovie[] = await callTopRated();\r\n            if(tops){\r\n                setTopRateds(tops);\r\n            }\r\n        }\r\n        getTopRateds();\r\n        return ()=>{\r\n            signal.abort();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n             <h3 className=\"center-text\">Top Rated</h3>      \r\n                    {topRateds.map(t=>{\r\n                        return <MovieRow key={`top-rated-${t.id}`} movie={{...t, summary: \"\"}} />\r\n                    })} \r\n        </Fragment>\r\n    )\r\n}\r\n"],"sourceRoot":""}