{"version":3,"sources":["callers/seasonCaller.ts","components/series/EditSeasonRow.tsx","components/series/EditEpisodeRow.tsx","components/series/EpisodeListEditor.tsx","components/series/EditSeasons.tsx","components/series/EditSeriesDetails.tsx","pages/EditSeries.tsx","callers/seriesCaller.ts"],"names":["seasonPath","EditSeasonRow","season","selectedId","onSelected","useState","mainClass","setMainClass","useEffect","id","onClick","className","order","releaseYear","episodes","length","EditEpisodeRow","episode","onSelect","onDelete","setClassName","title","normalFormat","releaseDate","toString","EpisodeListEditor","setEpisodes","summary","useBinder","genres","casts","selectedEpisode","setSelectedEpisode","bindEpisode","postCaller","caller","signal","messenger","useContext","MessageContext","a","newRunTime","newDate","Date","runtime","isNaN","parseInt","newEpisode","parseForInput","seasonId","moviePath","insertMovie","ECallType","INSERT","newId","addFail","updateMovie","ISOK","addSuccess","replacedList","find","s","episodeId","deleteMovie","filter","e","abort","clear","sort","compareEpisodes","map","key","deleteEpisode","icon","faPlusSquare","EditMovieDetails","movie","setMovie","movieBinder","EditCast","EditSeasons","series","setSeasons","setReleaseYear","seriesId","selectedSeason","setSelectedSeason","seasonCaller","newSeason","seasons","lastId","value","onChange","target","name","placeholder","eps","EditSeriesDetaills","bindSeries","setSeries","posterInput","useRef","useImage","postersrc","posterError","setPosterSource","formData","FormData","current","files","addWarning","resizeImageFn","resizedFile","append","uploadSeriesPoster","getTime","type","rows","src","onError","alt","ref","accept","EditSeries","getParameter","avgScore","seriesPath","selectDetailedSeries","SELECT","selectedSeries","insertSeries","changeParam","updateSeries","genre","newSeriesGenre","genreId","genreName","insertSeriesGenre","deleteSeriesGenre","getSeries","document","GenreAdder","onAdd","addGenre","removeGenre","newSeasons","selectLatestPreviewSeries","selectLatestPreviewSeriesJson","file","UploadFile","ok","selectDetailedSeriesPostFetch","detailedSeries","compareMovieGenresByName","orderSeasonCast","orderCasts","getSeasonCount","getEpisodeCount","sum","forEach","getFirstEpisodeDate","getAvgRuntime","epCount","getSeriesCast","seriesCast","setSeriesCastFromSeason","getAvgSeriesScore","reviewedEpisodeCount","setSeriesCastFromEpisode","setSeriesCastFromCast","cast","sc","artistId","updatedNames","characterNames","push","episodeCount","handleExistingSeriesCast","artistName","castTypeId","compareCastType","episode1","episode2"],"mappings":"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","file":"static/js/16.9c404f3b.chunk.js","sourcesContent":["\r\nexport const seasonPath = {\r\n    insertSeason: \"/season/insert_season\",\r\n    deleteSeason: \"/season/delete_season\"\r\n}\r\n\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ISeason } from '../../../common/season';\r\nimport \"./seriesStyle.css\"\r\n\r\ninterface IEditSeasonRow{\r\n    season: ISeason;\r\n    selectedId: number;\r\n    onSelected: ()=> void;\r\n}\r\n\r\nexport const EditSeasonRow: React.FC<IEditSeasonRow> = ({season, selectedId, onSelected}: IEditSeasonRow) => {\r\n    const [mainClass, setMainClass] = useState(\"season-grid\");\r\n    useEffect(()=>{\r\n        if(season.id === selectedId){\r\n            setMainClass(\"season-grid selected-row\");\r\n        } else {\r\n            setMainClass(\"season-grid\");\r\n        }\r\n    }, [selectedId]);\r\n    return (\r\n        <div onClick={()=> {onSelected();}} className={mainClass}>\r\n            <p>Season {season.order}</p>\r\n            <p>{season.releaseYear}</p>\r\n            <p>{season.episodes.length} episodes</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditSeasonRow;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react'\r\nimport { IMovie } from '../../../common/movie';\r\nimport { normalFormat } from '../../dateParser';\r\n\r\ninterface IEditEpisodeRow{\r\n    episode: IMovie;\r\n    selectedId: number;\r\n    onSelect: ()=> void;\r\n    onDelete: ()=> void;\r\n}\r\n\r\nexport const EditEpisodeRow: React.FC<IEditEpisodeRow> = ({episode, selectedId, onSelect, onDelete}: IEditEpisodeRow) => {\r\n    const [className, setClassName] = useState(\"edit-episode-row\")\r\n    useEffect(()=>{\r\n        if(selectedId === episode.id){\r\n            setClassName(\"edit-episode-row selected-row\");\r\n        } else {\r\n            setClassName(\"edit-episode-row\");\r\n        }\r\n    }, [selectedId]);\r\n    return (\r\n        <div onClick={onSelect} className={className}>\r\n            <p>{episode.title}</p>\r\n            <p>{normalFormat(episode.releaseDate.toString())}</p>\r\n            <p><button onClick={onDelete}>Delete</button></p>\r\n        </div>\r\n    )\r\n}\r\nexport default EditEpisodeRow;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { Fragment, useEffect, useContext } from 'react'\r\nimport EditEpisodeRow from './EditEpisodeRow';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'\r\nimport { useBinder } from '../../hooks';\r\nimport EditMovieDetails from '../movie/EditMovieDetails';\r\nimport { replacedList } from '../../utils';\r\nimport { parseForInput } from '../../dateParser';\r\nimport { EditCast } from '../movie/EditCast';\r\nimport { IMovie } from '../../../common/movie';\r\nimport { ISeason } from '../../../common/season';\r\nimport { moviePath } from '../../callers/movieCaller';\r\nimport { compareEpisodes } from '../../callers/seriesCaller';\r\nimport { ECallType, postCaller } from '../../callers/caller';\r\nimport { MessageContext } from '../Messenger';\r\ninterface IEpisodeListEditor{\r\n    season: ISeason;\r\n    setEpisodes: (eps: IMovie[]) => void;\r\n    summary: string;\r\n}\r\n\r\nexport const EpisodeListEditor: React.FC<IEpisodeListEditor> = ({season, setEpisodes, summary}) => {\r\n    const [selectedEpisode, setSelectedEpisode, bindEpisode] = useBinder<IMovie>({id: 0, title: \"\", summary: \"\", releaseDate: \"\", genres: [],  casts: []});\r\n    const [caller, signal] = postCaller();\r\n    const { messenger } = useContext(MessageContext);\r\n\r\n    useEffect(()=>{\r\n        if(selectedEpisode.id > 0){\r\n            setEpisodes(replacedList(season.episodes, season.episodes.find(s=> s.id === selectedEpisode.id), selectedEpisode));\r\n        }\r\n        return () =>{\r\n            signal.abort();\r\n            messenger.clear();\r\n        }\r\n    }, [selectedEpisode.casts]);\r\n\r\n    async function addEpisode(){\r\n        let newId: number;\r\n        let newDate: Date;\r\n        let newRunTime = 45;\r\n        if(season.episodes.length > 0){\r\n            newDate = new Date(season.episodes[season.episodes.length-1].releaseDate);\r\n            newRunTime = season.episodes[season.episodes.length-1].runtime;\r\n        } else if(!isNaN(parseInt(season.releaseYear))){\r\n            newDate = new Date(`${season.releaseYear}-01-01`);\r\n        } else {\r\n            newDate = new Date(\"2015-01-01\");\r\n        }\r\n        let newEpisode: IMovie = {\r\n            id: 0,\r\n            title: `Season ${season.order}: episode ${season.episodes.length+1}`,\r\n            runtime: newRunTime,\r\n            summary: summary,\r\n            genres: [],\r\n            releaseDate: parseForInput(newDate),\r\n            seasonId: season.id,\r\n            casts: []\r\n        }\r\n        newId = await caller(newEpisode, moviePath.insertMovie, ECallType.INSERT);\r\n        if(newId > 0){\r\n            setEpisodes([...season.episodes, {...newEpisode, id: newId}]);\r\n            setSelectedEpisode({...newEpisode, id: newId});\r\n        } else {\r\n            messenger.addFail(\"Server error: could not add new episode.\");\r\n        }\r\n    }\r\n\r\n    async function saveEpisode(){\r\n        if(await caller(selectedEpisode, moviePath.updateMovie, ECallType.ISOK)){\r\n            messenger.addSuccess(\"Episode details saved.\", 5000);\r\n            setEpisodes(replacedList(season.episodes, season.episodes.find(s=> s.id === selectedEpisode.id), selectedEpisode));\r\n        } else {\r\n            messenger.addFail(\"Server error: series details could not be saved.\");\r\n        }\r\n    }\r\n\r\n    async function deleteEpisode(episodeId: number){      \r\n        if(await caller({ id: episodeId }, moviePath.deleteMovie, ECallType.ISOK)){\r\n            setEpisodes(season.episodes.filter(e=> e.id !== episodeId));\r\n            if(selectedEpisode.id === episodeId) setSelectedEpisode({id: 0, title: \"\", summary: \"\", releaseDate: \"\", genres: [],  casts: []});\r\n        } else {\r\n            messenger.addFail(\"Server error: could not delete episode.\")\r\n        } \r\n    }\r\n\r\n    function handleSelection(episode: IMovie){\r\n        setSelectedEpisode(episode);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {season.episodes.sort(compareEpisodes).map(e=>{\r\n                return <EditEpisodeRow key={`${e.id}`} onDelete={()=>{ deleteEpisode(e.id)}} episode={e} selectedId={selectedEpisode.id} onSelect={()=>{ handleSelection(e)}} />\r\n            })}\r\n            <div onClick={addEpisode} className=\"add-episode\"><FontAwesomeIcon icon={faPlusSquare} /></div>\r\n            {(selectedEpisode.id > 0) ? \r\n            (<Fragment>\r\n                <button onClick={saveEpisode}>Save</button>\r\n                <EditMovieDetails movie={selectedEpisode} setMovie={setSelectedEpisode} movieBinder={bindEpisode} />\r\n                <EditCast movie={selectedEpisode} setMovie={setSelectedEpisode} season={season} setEpisodes={setEpisodes} />\r\n                </Fragment>):\r\n            (<Fragment></Fragment>)}\r\n        </div>\r\n    )\r\n}\r\nexport default EpisodeListEditor;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, Fragment, useEffect, useContext } from 'react'\r\nimport { IMovie } from '../../../common/movie';\r\nimport { ISeason } from '../../../common/season';\r\nimport { ISeries } from '../../../common/series';\r\nimport { ECallType, postCaller } from '../../callers/caller';\r\nimport { seasonPath } from '../../callers/seasonCaller';\r\nimport { replacedList } from '../../utils';\r\nimport { MessageContext } from '../Messenger';\r\nimport EditSeasonRow from './EditSeasonRow';\r\nimport EpisodeListEditor from './EpisodeListEditor';\r\ninterface IEditSeasons{\r\n    series: ISeries;\r\n    setSeasons: (seasons: ISeason[]) => void;\r\n}\r\n\r\nexport const EditSeasons: React.FC<IEditSeasons> = ({series, setSeasons}: IEditSeasons) => {\r\n    const [releaseYear, setReleaseYear] = useState(\"\");\r\n    const [selectedSeason, setSelectedSeason] = useState({ id: 0, seriesId: series.id, episodes: []});\r\n    const [seasonCaller, signal] = postCaller();\r\n    const { messenger } = useContext(MessageContext);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            signal.abort();\r\n            messenger.clear();\r\n        }\r\n    }, [])\r\n\r\n    async function addSeason(){\r\n        let newSeason = {\r\n            id: 0,\r\n            seriesId: series.id,\r\n            releaseYear: releaseYear,\r\n            episodes: [],\r\n            order: series.seasons.length+1\r\n        };\r\n        newSeason.id = await seasonCaller(newSeason, seasonPath.insertSeason, ECallType.INSERT);\r\n        if(newSeason.id){\r\n            setSeasons([...series.seasons, newSeason]);\r\n        }\r\n    }\r\n\r\n    function updateSelectedSeason(newId: number){\r\n        setSelectedSeason(series.seasons.find(s=> s.id === newId));\r\n    }\r\n\r\n    async function removeLastSeason(){\r\n        const lastId = series.seasons[series.seasons.length-1].id;\r\n        if(await seasonCaller({ id: lastId }, seasonPath.deleteSeason, ECallType.ISOK)){\r\n            setSeasons(series.seasons.filter(s=> s.id !== lastId));\r\n        } else {\r\n            messenger.addFail(\"Server error: could not remove season.\");\r\n        } \r\n    }\r\n\r\n    function replaceToSelectedSeason(episodes: IMovie[]){\r\n        //find the season that is selected inside the series, then replaces it to a new season that is constructed by the selected season and its new episodes\r\n        setSeasons(replacedList(series.seasons, series.seasons.find(s=> s.id === selectedSeason.id), {...selectedSeason, episodes: episodes } ));\r\n        setSelectedSeason({...selectedSeason, episodes: episodes });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"adder-panel\">\r\n            <h3>Add new season: </h3>\r\n                <label>Year</label>\r\n                <input value={releaseYear} onChange={(e)=> { setReleaseYear(e.target.value);}} name=\"releaseYear\" placeholder=\"release\" />\r\n                <button onClick={addSeason}>Add new season</button>\r\n                {series.seasons.length > 0 ?\r\n                (<button onClick={removeLastSeason} >Delete last season</button>) :\r\n                (<Fragment></Fragment>)}\r\n                \r\n            </div>\r\n            {series.seasons.map(s=>{\r\n                return <EditSeasonRow key={s.id} selectedId={selectedSeason.id} onSelected={()=> updateSelectedSeason(s.id)} season={s} />\r\n            })}\r\n            {(series.seasons.length > 0) ? \r\n            (<Fragment>\r\n                <h2 className=\"series-title\">Episodes:</h2>\r\n                <div>\r\n                    <EpisodeListEditor season={selectedSeason} setEpisodes={(eps: IMovie[])=> { replaceToSelectedSeason(eps)}} summary={series.summary} />\r\n                </div>\r\n            </Fragment>): \r\n            (<Fragment></Fragment>)}\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default EditSeasons;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { Fragment, useContext, useEffect, useRef } from 'react'\r\nimport { IDetailedSeries, ISeries } from '../../../common/series';\r\nimport { uploadSeriesPoster } from '../../callers/seriesCaller';\r\nimport { useImage } from '../../hooks';\r\nimport { resizeImageFn } from '../../utils';\r\nimport { MessageContext } from '../Messenger';\r\nimport \"../movie/movieStyle.css\";\r\n\r\ninterface IEditSeriesDetails{\r\n    series: IDetailedSeries;\r\n    setSeries: (s: ISeries) => void;\r\n    bindSeries: (e)=> void;\r\n}\r\n\r\nexport const EditSeriesDetaills: React.FC<IEditSeriesDetails> = ({series, setSeries, bindSeries}: IEditSeriesDetails) => {\r\n    const posterInput = useRef<HTMLInputElement>();\r\n    const [postersrc, posterError, setPosterSource] = useImage(\"/rewer/uploads/seriesposters\", `${series.id}.jpg`);\r\n    const { messenger } = useContext(MessageContext);\r\n\r\n    useEffect(()=>{\r\n        return ()=>{\r\n            messenger.clear();\r\n        }\r\n    }, []);\r\n\r\n    async function savePoster(){\r\n        const formData = new FormData();\r\n        if(!posterInput.current.files[0]){\r\n            messenger.addWarning(\"No file is selected.\", 5000);\r\n            return;\r\n        }\r\n        const resizedFile = await resizeImageFn(posterInput.current.files[0], 400, 600, 0.8);\r\n        formData.append(\"poster\", resizedFile, `${series.id}.jpg`);\r\n        if(await uploadSeriesPoster(formData)){\r\n            setPosterSource(`/rewer/uploads/seriesposters`, `${series.id}.jpg?${new Date().getTime()}`);\r\n        } else {\r\n            messenger.addFail(\"Server error: upload unsuccessful.\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n        <div className=\"detail-grid\">\r\n            <div className=\"span-2\">\r\n                <input value={series.title} onChange={bindSeries} name=\"title\" type=\"text\" placeholder=\"Title\" className=\"title-input\" /><br/>\r\n                <textarea value={series.summary} onChange={bindSeries} name=\"summary\" placeholder=\"Write something about the story...\" rows={20} />\r\n            </div>\r\n            <div>\r\n                <img src={postersrc} onError={posterError} alt=\"Poster\" title=\"Poster\" className=\"edit-poster\"/>\r\n                {(series.id > 0)? \r\n                (<Fragment>\r\n                    <p>It is recommended to use an image with a standard poster image ratio</p>\r\n                    <input ref={posterInput} type=\"file\" accept=\".png,.jpg,.jpeg\" className=\"file-input\" />\r\n                    <button onClick={savePoster}>Upload</button>\r\n                </Fragment>):\r\n                (<Fragment>\r\n                    <p>Create the series' page to edit this picture.</p>\r\n                </Fragment>)}\r\n            </div>\r\n        </div>\r\n    </Fragment>)\r\n}\r\n\r\nexport default EditSeriesDetaills;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useContext, Fragment} from 'react'\r\nimport { IGenre, ISeriesGenre } from '../../common/genre';\r\nimport { ISeason } from '../../common/season';\r\nimport { IDetailedSeries } from '../../common/series';\r\nimport { ECallType, postCaller } from '../callers/caller';\r\nimport { seriesPath } from '../callers/seriesCaller';\r\nimport { MessageContext } from '../components/Messenger';\r\nimport GenreAdder from '../components/movie/GenreAdder';\r\nimport EditSeasons from '../components/series/EditSeasons';\r\nimport EditSeriesDetaills from '../components/series/EditSeriesDetails';\r\nimport { useBinder } from '../hooks';\r\nimport { changeParam, getParameter } from '../urlManager'\r\n\r\nexport default function EditSeries() {\r\n    const [series, setSeries, bindSeries] = useBinder<IDetailedSeries>({id: parseInt(getParameter(\"seriesId\")), title: \"\", summary: \"\", seasons: [], genres: [], avgScore: 0 });\r\n    const [caller, signal] = postCaller();\r\n    const { messenger } = useContext(MessageContext);\r\n    useEffect(()=>{\r\n        if(series.id > 0){\r\n            getSeries();\r\n        }\r\n        return ()=>{\r\n            signal.abort();\r\n            messenger.clear();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        if(series) document.title = `(Edit) ${series.title} - Rewer`;\r\n    }, [series]);\r\n\r\n    async function getSeries(){\r\n        let selectedSeries = await caller({ id: series.id }, seriesPath.selectDetailedSeries, ECallType.SELECT);\r\n        if(selectedSeries){\r\n            setSeries(selectedSeries);\r\n        }\r\n    }\r\n\r\n    async function createSeries(){\r\n        const newId = await caller(series, seriesPath.insertSeries, ECallType.INSERT);\r\n        if(newId){\r\n            setSeries({ ...series, id: newId });\r\n            changeParam({ name: \"seriesId\", value: newId.toString() });\r\n            messenger.addSuccess(\"Series page created.\", 5000);\r\n        } else {\r\n            messenger.addFail(\"Server error: could not create series page.\");\r\n        }\r\n    }\r\n\r\n    async function saveSeries(){\r\n        if(await caller(series, seriesPath.updateSeries, ECallType.ISOK)){\r\n            messenger.addSuccess(\"Series details saved.\", 5000);\r\n        } else {\r\n            messenger.addFail(\"Server error: series details could not be saved.\");\r\n        }\r\n    }\r\n\r\n    async function addGenre(genre: IGenre){\r\n        let newSeriesGenre: ISeriesGenre = {\r\n            id: 0,\r\n            seriesId: series.id,\r\n            genreId: genre.id,\r\n            genreName: genre.name\r\n        }\r\n        newSeriesGenre.id = await caller(newSeriesGenre, seriesPath.insertSeriesGenre, ECallType.INSERT);\r\n        if(newSeriesGenre.id > 0){\r\n            setSeries({ ...series, genres: [...series.genres, newSeriesGenre] });\r\n        } else {\r\n            messenger.addFail(\"Server error: could not add genre.\")\r\n        }\r\n    }\r\n\r\n    async function removeGenre(id: number){\r\n        if(await caller({ id: id }, seriesPath.deleteSeriesGenre, ECallType.ISOK)){\r\n            setSeries({...series, genres: series.genres.filter(s=> s.id !== id)});\r\n        } else {\r\n            messenger.addFail(\"Server error: could not delete genre.\");\r\n        }\r\n    }\r\n\r\n    function setSeasons(newSeasons: ISeason[]){\r\n        setSeries({...series, seasons: newSeasons})\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n            <br/>\r\n            {(series.id > 0)?\r\n            (<button onClick={saveSeries}>Save series details</button>):\r\n            (<button onClick={createSeries}>Create series</button>)}\r\n            <EditSeriesDetaills series={series} setSeries={setSeries} bindSeries={bindSeries} />\r\n            {(series.id > 0) ?\r\n            (<Fragment>\r\n                <GenreAdder movie={series} onAdd={(genre: IGenre)=> { addGenre(genre); }} onDelete={(id: number)=> { removeGenre(id) }} />\r\n                <EditSeasons series={series} setSeasons={setSeasons} />\r\n            </Fragment>) :\r\n            (<Fragment></Fragment>)}\r\n        </div>\r\n    )\r\n}","import { ICast, ISeriesCast } from \"../../common/cast\";\r\nimport { IMovie } from \"../../common/movie\";\r\nimport { ISeason } from \"../../common/season\";\r\nimport { IDetailedSeries, IPreviewSeries, ISeries, ISeriesGenre } from \"../../common/series\";\r\nimport { POSTAsynch, UploadFile } from \"./caller\";\r\nimport { compareCastType } from \"./castCaller\";\r\nimport { compareMovieGenresByName } from \"./movieCaller\";\r\n\r\nexport const seriesPath = {\r\n    insertSeries:\"/series/insert_series\",\r\n    updateSeries: \"/series/update_series\",\r\n    uploadSeriesPoster: \"/series/upload_series_poster\",\r\n    selectDetailedSeries: \"/series/select_detailed_series\",\r\n    selectLatestPreviewSeries: \"/series/select_latest_preview_series\",\r\n    selectLatestPreviewSeriesJson: \"/jsondb/latest_series.json\", \r\n    insertSeriesGenre: \"/genre/insert_series_genre\",\r\n    deleteSeriesGenre: \"/genre/delete_series_genre\"\r\n}\r\n\r\nexport async function uploadSeriesPoster(file: FormData): Promise<boolean>{\r\n    const response = await UploadFile(\"/series/upload_series_poster\", file);\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function selectDetailedSeriesPostFetch(detailedSeries: IDetailedSeries){\r\n    detailedSeries.genres.sort(compareMovieGenresByName);\r\n    orderCasts(detailedSeries);\r\n    for(let season of detailedSeries.seasons) {\r\n        season.episodes.sort(compareEpisodes);\r\n    }\r\n}\r\n\r\nexport async function selectLatestPreviewSeries(limit: number, offset: number): Promise<IPreviewSeries[] | null >{\r\n    const response = await POSTAsynch(\"/series/select_latest_preview_series\", { limit: limit, offset: offset});\r\n    if(response.ok){\r\n        return await response.json();\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function insertSeriesGenre(seriesGenre: ISeriesGenre): Promise<number | null>{\r\n    const response = await POSTAsynch(\"genre/insert_series_genre\", seriesGenre);\r\n    if(response.ok){\r\n        return (await response.json()).newId;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function deleteSeriesGenre(id: number): Promise<boolean>{\r\n    const response = await POSTAsynch(\"genre/delete_series_genre\", { id: id});\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getSeasonCount(series: ISeries): number{\r\n    return series.seasons.filter(s=> s.episodes.length > 0).length;\r\n}\r\n\r\nexport function getEpisodeCount(series: ISeries): number{\r\n    let sum: number = 0;\r\n    series.seasons.forEach(season => {\r\n        sum += season.episodes.length;\r\n    });\r\n    return sum;\r\n}\r\n\r\n\r\nexport function getFirstEpisodeDate(series: ISeries): string{\r\n    if(series.seasons.length > 0 && series.seasons[0].episodes.length > 0){\r\n        return series.seasons[0].episodes[0].releaseDate;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function getAvgRuntime(series: ISeries): number{\r\n    let epCount: number = getEpisodeCount(series);\r\n    let sum: number = 0;\r\n    for(let season of series.seasons) {\r\n        for(let episode of season.episodes) {\r\n            if(episode.runtime > 0) sum += episode.runtime;\r\n        }\r\n    }\r\n    return sum / epCount;\r\n}\r\n\r\nexport function getSeriesCast(series: ISeries): ISeriesCast[]{\r\n    let seriesCast: ISeriesCast[] = [];\r\n    for(let season of series.seasons) {\r\n        setSeriesCastFromSeason(season, seriesCast);\r\n    }\r\n    return seriesCast;\r\n}\r\n\r\nfunction compareSeriesCastByEpisodeCount(scast1: ISeriesCast, scast2: ISeriesCast){\r\n    if(scast1.episodeCount > scast2.episodeCount){\r\n        return -1;\r\n    }\r\n    if(scast1.episodeCount < scast2.episodeCount){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function getAvgSeriesScore(series: ISeries){\r\n    let reviewedEpisodeCount: number = 0;\r\n    let sum: number = 0;\r\n    for(let season of series.seasons) {\r\n        for(let episode of season.episodes) {\r\n            if(episode.avgScore > 0){\r\n                sum = sum + episode.avgScore;\r\n                reviewedEpisodeCount++;\r\n            } \r\n        }\r\n    }\r\n    return sum / reviewedEpisodeCount;\r\n}\r\n\r\nfunction setSeriesCastFromSeason(season: ISeason, seriesCast: ISeriesCast[]){\r\n    for(let episode of season.episodes) {\r\n        setSeriesCastFromEpisode(episode, seriesCast);\r\n    }\r\n}\r\n\r\nfunction setSeriesCastFromEpisode(episode: IMovie, seriesCast: ISeriesCast[]){\r\n    for(let cast of episode.casts) {\r\n        setSeriesCastFromCast(cast, seriesCast);\r\n    }\r\n}\r\n\r\nfunction setSeriesCastFromCast(cast: ICast, seriesCast: any[]){\r\n    let sc: ISeriesCast = seriesCast.find(a=> a.artistId === cast.artistId);\r\n    if(sc != null){\r\n        handleExistingSeriesCast(cast, sc);\r\n    } else {\r\n        seriesCast.push({ \r\n            artistId: cast.artistId, \r\n            artistName: cast.artistName, \r\n            episodeCount: 1, \r\n            characterNames: [cast.name], \r\n            castTypeId: cast.castTypeId } );\r\n    }\r\n}\r\n\r\nfunction handleExistingSeriesCast(cast: ICast, sc: any){\r\n     let updatedNames = sc.characterNames;\r\n     if(sc.characterNames.filter(a=> a === cast.name).length === 0){\r\n         updatedNames.push(cast.name);\r\n     }\r\n     sc = {...sc, episodeCount: sc.episodeCount++, characterNames: updatedNames };\r\n}\r\n\r\nfunction orderCasts(series: ISeries){\r\n    for(let season of series.seasons) {\r\n        orderSeasonCast(season);\r\n    }\r\n}\r\n\r\nfunction orderSeasonCast(seasons: ISeason){\r\n    for(let episode of seasons.episodes) {\r\n            episode.casts.sort(compareCastType);\r\n    }\r\n}\r\n\r\nexport function compareEpisodes(episode1: IMovie, episode2: IMovie){\r\n    if(new Date(episode1.releaseDate) > new Date(episode2.releaseDate)){\r\n        return 1;\r\n    }\r\n    if(new Date(episode1.releaseDate) < new Date(episode2.releaseDate)){\r\n        return -1;\r\n    }\r\n    if(episode1.releaseDate === episode2.releaseDate){\r\n        if(episode1.id > episode2.id) return 1;\r\n        if(episode1.id < episode2.id) return -1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n"],"sourceRoot":""}