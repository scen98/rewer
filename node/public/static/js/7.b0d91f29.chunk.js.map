{"version":3,"sources":["pages/News.tsx","hooks.tsx","dateParser.ts","callers/movieCaller.ts","components/movie/Score.tsx","callers/castCaller.ts","callers/seriesCaller.ts","components/movie/MovieRow.tsx","components/movie/MovieDiv.tsx","components/series/SeriesDiv.tsx","components/movie/FeaturedSides.tsx","components/movie/MovieRowList.tsx","components/series/FeaturedSeriesSides.tsx","callers/articleCaller.ts","components/movie/GenreSelect.tsx","components/movie/GenreSide.tsx","components/movie/TopRatedSides.tsx","components/article/ArticleRow.tsx","components/article/ArticleRowList.tsx"],"names":["News","useState","mainMsg","setMainMsg","useAsyncReference","news","setNews","postCaller","newsCaller","signal","useScroll","addScroll","removeScroll","a","limit","offset","articlePath","selectLatestArticles","articles","length","current","useEffect","getNews","document","title","abort","window","screen","width","className","cutPos","ESize","value","ref","useRef","forceRender","newState","Object","is","s","useBinder","get","set","event","target","name","useAsyncBinder","updateState","useCutter","defaultText","defaultCutPos","getCutText","firstText","firstCut","isCut","setIsCut","outputText","setOutputText","cut","text","newText","didCut","toCut","substring","onEnter","callback","key","pos","newPos","position","listener","innerHeight","scrollY","body","offsetHeight","addEventListener","removeEventListener","useImage","path","fileName","size","Normal","tryAgain","imgSrc","setImgSrc","tryAgainRef","onError","imgSrcSetter","newPath","newFileName","parseDateYYYYMMDD","date","getFullYear","monthNames","getMonth","getDate","getYear","Date","getDay","normalFormat","d","parseForInput","month","day","toString","moviePath","selectDetailedMovie","selectLatestMovies","selectLatestMoviesJson","selectLatestMoviesByGenre","selectMoviesByScore","getGenres","insertMovie","updateMovie","deleteMovie","uploadPoster","insertMovieGenre","deleteMovieGenre","selectUpcomingMovies","selectUpcomingMoviesJson","file","UploadFile","ok","compareMovieGenresByName","genre1","genre2","genreName","localeCompare","Score","scoreClass","setScoreClass","Math","round","castPath","getCastTypes","insertCast","insertCasts","updateCast","deleteCast","compareCastType","cast1","cast2","castTypeId","seriesPath","insertSeries","updateSeries","uploadSeriesPoster","selectDetailedSeries","selectLatestPreviewSeries","selectLatestPreviewSeriesJson","insertSeriesGenre","deleteSeriesGenre","selectDetailedSeriesPostFetch","detailedSeries","genres","sort","series","seasons","orderSeasonCast","orderCasts","episodes","compareEpisodes","getSeasonCount","filter","getEpisodeCount","sum","forEach","season","getFirstEpisodeDate","releaseDate","getAvgRuntime","epCount","episode","runtime","getSeriesCast","seriesCast","setSeriesCastFromSeason","getAvgSeriesScore","reviewedEpisodeCount","avgScore","setSeriesCastFromEpisode","casts","setSeriesCastFromCast","cast","sc","find","artistId","updatedNames","characterNames","push","episodeCount","handleExistingSeriesCast","artistName","episode1","episode2","id","MovieRow","movie","Small","imgsrc","onImgError","imgClass","setImgClass","summary","to","src","alt","MovieDiv","Medium","scoreLine","style","display","SeriesDiv","FeaturedSides","featuredMovies","setFeaturedMovies","getCaller","caller","movies","rnd","floor","random","slice","getLatestFeatures","map","f","MovieRowList","m","FeaturedSeriesSides","featueredSeries","setFeaturedSeries","seriesCaller","featured","requestFeaturedSeries","insertArticle","updateArticle","deleteArticle","selectArticlesByUser","uploadImage","uploadArticleImage","GenreSelect","setSelectedGenre","selectedGenre","any","setGenres","onChange","e","g","parseInt","GenreSide","setMovies","genreCaller","genreSignal","genreId","movieCaller","movieSignal","allGenres","requestGenres","requestMovies","TopRatedSides","topRateds","setTopRateds","min","callTopRated","tops","getTopRateds","t","ArticleRow","article","isTextCut","cutText","onClick","userName","readMore","href","ArticleRowList"],"mappings":"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","file":"static/js/7.b0d91f29.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react'\r\nimport { IArticle } from '../../common/article';\r\nimport { articlePath } from '../callers/articleCaller';\r\nimport { postCaller } from '../callers/caller';\r\nimport ArticleRowList from '../components/article/ArticleRowList';\r\nimport FeaturedSides from '../components/movie/FeaturedSides';\r\nimport GenreSide from '../components/movie/GenreSide';\r\nimport TopRatedSides from '../components/movie/TopRatedSides';\r\nimport FeaturedSeriesSides from '../components/series/FeaturedSeriesSides';\r\nimport { useAsyncReference, useScroll } from '../hooks'\r\n\r\nexport default function News() {\r\n    const [mainMsg, setMainMsg] = useState(\"Downloading data...\");\r\n    const [news, setNews] = useAsyncReference([]);\r\n    const [newsCaller, signal] = postCaller();\r\n    const [addScroll, removeScroll] = useScroll(0.9, getMoreNews);\r\n    const articlePerPage = 15;\r\n    useEffect(()=>{\r\n        getNews();\r\n        document.title = \"News - Rewer\";\r\n        return ()=>{\r\n            signal.abort();\r\n            removeScroll();\r\n        }\r\n    }, []);\r\n\r\n    async function getNews(){\r\n        const articles: IArticle[]  = await newsCaller({ limit: articlePerPage, offset: 0 }, articlePath.selectLatestArticles);\r\n        if(articles){\r\n            setNews(articles);\r\n            if(articles.length === articlePerPage) addScroll();\r\n            setMainMsg(\"\");\r\n        } else {\r\n            setMainMsg(\"Server error: could not downlaod news data.\");\r\n        }\r\n    }\r\n\r\n    async function getMoreNews(){\r\n        removeScroll();\r\n        const articles: IArticle[] = await newsCaller({ limit: articlePerPage, offset: news.current.length }, articlePath.selectLatestArticles);\r\n        if(articles){\r\n            setNews([ ...news.current, ...articles ]);\r\n            if(articles.length === articlePerPage) addScroll();\r\n        }\r\n    }\r\n    return (\r\n        <Fragment>\r\n            {(window.screen.width > 800)?\r\n            (<div className=\"main-grid\">\r\n                <div className=\"left-item\">\r\n                    <div className=\"side-container medium-side\" >\r\n                        <FeaturedSeriesSides/>  \r\n                    </div>\r\n                    <div className=\"side-container medium-side\" >\r\n                        <GenreSide length={5} /> \r\n                    </div>\r\n                </div>\r\n                <div className=\"main-item\">\r\n                    <p>{mainMsg}</p>\r\n                    <ArticleRowList articles={news.current} cutPos={200} />\r\n                </div>\r\n                <div className=\"right-item\">\r\n                    <div className=\"side-container medium-side\">\r\n                        <FeaturedSides />\r\n                                             \r\n                    </div>         \r\n                    <div className=\"side-container medium-side\">     \r\n                        <TopRatedSides />\r\n                    </div>               \r\n                </div>\r\n            </div>):\r\n            (<div className=\"main\">\r\n                <ArticleRowList articles={news.current} cutPos={150} />\r\n            </div>)}\r\n        </Fragment>\r\n    )\r\n}\r\n","import { useState, useRef } from \"react\";\r\nexport function useAsyncReference<T>(value: T) {\r\n    const ref = useRef(value);\r\n    const [, forceRender] = useState(false);\r\n    const updateState = (newState) => {\r\n        if (!Object.is(ref.current, newState)) {\r\n            ref.current = newState;\r\n            forceRender(s => !s);\r\n        }\r\n    }\r\n    return [ref, updateState] as const;\r\n}\r\n\r\nexport function useBinder<T>(value: T){\r\n    const [get, set] = useState<T>(value);\r\n    const bind = (event)=>{\r\n        set({...get, [event.target.name]: event.target.value});\r\n    }\r\n    return [get, set, bind] as const;\r\n}\r\n\r\nexport function useAsyncBinder<T>(value: T){\r\n    const ref = useRef(value);\r\n    const [, forceRender] = useState(false);\r\n    const updateState = (newState) => {\r\n        if (!Object.is(ref.current, newState)) {\r\n            ref.current = newState;\r\n            forceRender(s => !s);\r\n        }\r\n    }\r\n    const bind = (event) => {\r\n        updateState({...ref.current, [event.target.name]: event.target.value});\r\n    }\r\n    return [ref, updateState, bind] as const;\r\n}\r\n\r\nexport function useCutter(defaultText: string, defaultCutPos = 0): readonly [string, boolean, (text: string, custPos?: number)=>void]{\r\n    const [firstText, firstCut] = getCutText(defaultText, defaultCutPos > 0, defaultCutPos);\r\n    const [isCut, setIsCut] = useState(firstCut);\r\n    const [outputText, setOutputText] = useState(firstText);\r\n\r\n    const cut = (text: string, cutPos = 0) => {\r\n        const [newText, didCut] = getCutText(text, cutPos > 0, cutPos);\r\n        setOutputText(newText);\r\n        setIsCut(didCut);\r\n    }\r\n\r\n    return [outputText, isCut, cut] as const;\r\n}\r\n\r\nfunction getCutText(text: string, toCut: boolean, cutPos: number): [string, boolean]{\r\n    if(toCut && text.length > cutPos){\r\n        return [text.substring(0, cutPos) + \"...\", true];\r\n    }\r\n    return [text, false];\r\n}\r\n\r\nexport function setBinder(event, object, setter: (any)=> void){\r\n    setter({...object.current, [event.target.name]: event.target.value});\r\n}\r\n\r\nexport function onEnter(event, callback){\r\n    if (event.key === 'Enter') {\r\n        callback();\r\n    }\r\n}\r\n\r\nexport function useScroll(pos: number, callback: ()=> any): readonly [()=>void, ()=>void]{ \r\n    let newPos = pos;\r\n    if(pos > 1 || pos < 0) newPos = 0.8;\r\n    const position = useRef(newPos);\r\n    const listener = ()=>{\r\n        if((window.innerHeight + window.scrollY) >= (document.body.offsetHeight*position.current)){\r\n            callback();\r\n        }\r\n    }\r\n    const addListener = () =>{\r\n        window.addEventListener(\"scroll\", listener);\r\n    }\r\n    const removeListener = ()=>{\r\n        window.removeEventListener(\"scroll\", listener);\r\n    }\r\n    return [addListener, removeListener] as const;\r\n}\r\n\r\nexport enum ESize{\r\n    Normal = \"\",\r\n    Medium = \"medium-\",\r\n    Small = \"small-\",\r\n}\r\n\r\nexport function useImage(path: string, fileName: string, size = ESize.Normal, tryAgain = false){\r\n    const [imgSrc, setImgSrc] = useState<string>(`${path}/${size}${fileName}`);\r\n    const tryAgainRef = useRef(tryAgain);\r\n    const onError= () =>{\r\n        if(tryAgainRef.current){\r\n            setImgSrc(`${path}/${ESize.Normal}${fileName}`);\r\n            tryAgainRef.current = false;\r\n        } else {\r\n            setImgSrc(`${path}/${size}0.jpg`);\r\n        }\r\n    }\r\n    const imgSrcSetter = (newPath: string, newFileName: string) => {\r\n        setImgSrc(`${newPath}/${size}${newFileName}`);\r\n    }\r\n    return [imgSrc, onError, imgSrcSetter] as const;\r\n}\r\n\r\nexport interface IWindowState{\r\n    name: string;\r\n    maxValue: number;\r\n}\r\n\r\nexport function useWidth(defWindowStates: IWindowState[]){\r\n    const windowsStates = useRef(defWindowStates.sort(compareWindowStates));\r\n    const [currentWindowState, setCurrentWindowState] = useState(windowsStates.current.find(w=> w.maxValue > window.innerWidth));\r\n    const listen = ()=>{\r\n        window.addEventListener(\"resize\", ()=>{\r\n            windowStateSetter();\r\n        });\r\n    }\r\n    const cleanUpListener = ()=>{\r\n        window.removeEventListener(\"resize\", ()=>{\r\n            windowStateSetter();\r\n        });\r\n    }\r\n    const windowStateSetter = ()=>{\r\n        setCurrentWindowState(windowsStates.current.find(w=> w.maxValue > window.innerWidth));\r\n    }\r\n    return [currentWindowState, listen, cleanUpListener] as const;\r\n}\r\n\r\nfunction compareWindowStates(wstate1: IWindowState, wstate2: IWindowState){\r\n    if(wstate1.maxValue < wstate2.maxValue) return -1;\r\n    if(wstate1.maxValue > wstate2.maxValue) return 1;\r\n    return 0;\r\n}","export function parseDateHun(date: Date): string{\r\n    return `${date.getFullYear()}. ${monthNames[date.getMonth()]} ${date.getDate()}. ${parseDatehhdd(date)}`;\r\n}\r\n\r\nexport function parseDateYYYYMMDD(date: Date):string{\r\n    return `${date.getFullYear()}. ${monthNames[date.getMonth()]} ${date.getDate()}`;\r\n}\r\n\r\nexport function parseDatehhdd(date: Date):string{\r\n    if(date.getMinutes() < 10){\r\n        return `${date.getHours()}:0${date.getMinutes()}`;\r\n    } else {\r\n        return `${date.getHours()}:${date.getMinutes()}`;\r\n    }\r\n}\r\n\r\nexport function getYear(date: string){\r\n    return new Date(date).getFullYear();\r\n}\r\n\r\nexport function getMonth(date: string){\r\n    return monthNames[new Date(date).getMonth()]; \r\n}\r\n\r\nexport function getDay(date: string){\r\n    return new Date(date).getDate();\r\n}\r\n\r\nexport function normalFormat(date: string): string{\r\n    let d = new Date(date);\r\n    return `${d.getDate()} ${monthNames[d.getMonth()]} ${d.getFullYear()}`;\r\n}\r\n\r\nexport function parseForInput(date: Date): string{\r\n    let month: string;\r\n    let day: string;\r\n    if(date.getMonth() < 9){\r\n        month = `0${date.getMonth()+1}`;\r\n    } else {\r\n        month = (date.getMonth()+1).toString();\r\n    }\r\n    if(date.getDate() < 10){\r\n        day = `0${date.getDate()}`;\r\n    } else {\r\n        day = date.getDate().toString();\r\n    }\r\n\r\n    return `${date.getFullYear()}-${month}-${day}`;\r\n}\r\n\r\nexport let monthNames = [\"Janury\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n","import { IGenre, IMovieGenre, ISeriesGenre } from \"../../common/genre\";\r\nimport { UploadFile } from \"../callers/caller\";\r\n\r\nexport const moviePath = {\r\n    selectDetailedMovie: \"/movie/select_detailed_movie\",\r\n    selectLatestMovies: \"/movie/select_latest_movies\",\r\n    selectLatestMoviesJson: \"/jsondb/latest_movies.json\",\r\n    selectLatestMoviesByGenre: \"/movie/select_latest_movies_by_genre\",\r\n    selectMoviesByScore: \"/movie/select_movies_by_score\",\r\n    getGenres: \"/jsondb/genres.json\",\r\n    insertMovie: \"/movie/insert_movie\",\r\n    updateMovie: \"/movie/update_movie\",\r\n    deleteMovie: \"/movie/delete_movie\",\r\n    uploadPoster: \"/movie/upload_poster\",\r\n    insertMovieGenre: \"/genre/insert_movie_genre\",\r\n    deleteMovieGenre: \"/genre/delete_movie_genre\",\r\n    selectUpcomingMovies: \"/movie/select_upcoming_movies\",\r\n    selectUpcomingMoviesJson: \"/jsondb/upcoming_movies.json\"\r\n}\r\n\r\nexport async function uploadPoster(file: FormData): Promise<boolean>{\r\n    const response = await UploadFile(\"/movie/upload_poster\", file);\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function compareGenresByName(genre1: IGenre, genre2: IGenre){\r\n    return genre1.name.localeCompare(genre2.name);\r\n}\r\n\r\nexport function compareMovieGenresByName(genre1: IMovieGenre | ISeriesGenre, genre2: IMovieGenre | ISeriesGenre){\r\n    return genre1.genreName.localeCompare(genre2.genreName);\r\n}","import React, { useState, useEffect } from 'react'\r\n\r\ninterface IScore{\r\n    value: number;\r\n}\r\n\r\nexport const Score: React.FC<IScore> = ({value}: IScore) => {\r\n    const [scoreClass, setScoreClass] = useState(\"score\");\r\n    useEffect(()=>{\r\n        if(value > 6){\r\n            setScoreClass(\"score high\");\r\n        } else if(value > 3){\r\n            setScoreClass(\"score\");\r\n        } else if(value > 0) {\r\n            setScoreClass(\"score low\");\r\n        } else {\r\n            setScoreClass(\"score unset\");\r\n        }\r\n    }, [value])\r\n    return (\r\n        <div className={scoreClass}>\r\n            <p>{Math.round(value*10) / 10}</p>\r\n        </div>\r\n    )\r\n}\r\n","import { ICast, IMovieCast } from \"../../common/cast\";\r\n\r\nexport const castPath = {\r\n    getCastTypes: \"/jsondb/cast_types.json\",\r\n    insertCast: \"/cast/insert_cast\",\r\n    insertCasts: \"/cast/insert_casts\",\r\n    updateCast: \"/cast/update_cast\",\r\n    deleteCast: \"/cast/delete_cast\"\r\n}\r\n\r\nexport function compareCastType(cast1: ICast, cast2: ICast){\r\n    if(cast1.castTypeId < cast2.castTypeId){\r\n        return -1;\r\n    }\r\n    if(cast1.castTypeId > cast2.castTypeId){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function compareDate(cast1: IMovieCast, cast2: IMovieCast){\r\n    if(new Date(cast1.movieDate) < new Date(cast2.movieDate)){\r\n        return -1;\r\n    }\r\n    if(new Date(cast1.movieDate) > new Date(cast2.movieDate)){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n","import { ICast, ISeriesCast } from \"../../common/cast\";\r\nimport { IMovie } from \"../../common/movie\";\r\nimport { ISeason } from \"../../common/season\";\r\nimport { IDetailedSeries, IPreviewSeries, ISeries, ISeriesGenre } from \"../../common/series\";\r\nimport { POSTAsynch, UploadFile } from \"./caller\";\r\nimport { compareCastType } from \"./castCaller\";\r\nimport { compareMovieGenresByName } from \"./movieCaller\";\r\n\r\nexport const seriesPath = {\r\n    insertSeries:\"/series/insert_series\",\r\n    updateSeries: \"/series/update_series\",\r\n    uploadSeriesPoster: \"/series/upload_series_poster\",\r\n    selectDetailedSeries: \"/series/select_detailed_series\",\r\n    selectLatestPreviewSeries: \"/series/select_latest_preview_series\",\r\n    selectLatestPreviewSeriesJson: \"/jsondb/latest_series.json\", \r\n    insertSeriesGenre: \"/genre/insert_series_genre\",\r\n    deleteSeriesGenre: \"/genre/delete_series_genre\"\r\n}\r\n\r\nexport async function uploadSeriesPoster(file: FormData): Promise<boolean>{\r\n    const response = await UploadFile(\"/series/upload_series_poster\", file);\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function selectDetailedSeriesPostFetch(detailedSeries: IDetailedSeries){\r\n    detailedSeries.genres.sort(compareMovieGenresByName);\r\n    orderCasts(detailedSeries);\r\n    for(let season of detailedSeries.seasons) {\r\n        season.episodes.sort(compareEpisodes);\r\n    }\r\n}\r\n\r\nexport async function selectLatestPreviewSeries(limit: number, offset: number): Promise<IPreviewSeries[] | null >{\r\n    const response = await POSTAsynch(\"/series/select_latest_preview_series\", { limit: limit, offset: offset});\r\n    if(response.ok){\r\n        return await response.json();\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function insertSeriesGenre(seriesGenre: ISeriesGenre): Promise<number | null>{\r\n    const response = await POSTAsynch(\"genre/insert_series_genre\", seriesGenre);\r\n    if(response.ok){\r\n        return (await response.json()).newId;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function deleteSeriesGenre(id: number): Promise<boolean>{\r\n    const response = await POSTAsynch(\"genre/delete_series_genre\", { id: id});\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getSeasonCount(series: ISeries): number{\r\n    return series.seasons.filter(s=> s.episodes.length > 0).length;\r\n}\r\n\r\nexport function getEpisodeCount(series: ISeries): number{\r\n    let sum: number = 0;\r\n    series.seasons.forEach(season => {\r\n        sum += season.episodes.length;\r\n    });\r\n    return sum;\r\n}\r\n\r\n\r\nexport function getFirstEpisodeDate(series: ISeries): string{\r\n    if(series.seasons.length > 0 && series.seasons[0].episodes.length > 0){\r\n        return series.seasons[0].episodes[0].releaseDate;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function getAvgRuntime(series: ISeries): number{\r\n    let epCount: number = getEpisodeCount(series);\r\n    let sum: number = 0;\r\n    for(let season of series.seasons) {\r\n        for(let episode of season.episodes) {\r\n            if(episode.runtime > 0) sum += episode.runtime;\r\n        }\r\n    }\r\n    return sum / epCount;\r\n}\r\n\r\nexport function getSeriesCast(series: ISeries): ISeriesCast[]{\r\n    let seriesCast: ISeriesCast[] = [];\r\n    for(let season of series.seasons) {\r\n        setSeriesCastFromSeason(season, seriesCast);\r\n    }\r\n    return seriesCast;\r\n}\r\n\r\nfunction compareSeriesCastByEpisodeCount(scast1: ISeriesCast, scast2: ISeriesCast){\r\n    if(scast1.episodeCount > scast2.episodeCount){\r\n        return -1;\r\n    }\r\n    if(scast1.episodeCount < scast2.episodeCount){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function getAvgSeriesScore(series: ISeries){\r\n    let reviewedEpisodeCount: number = 0;\r\n    let sum: number = 0;\r\n    for(let season of series.seasons) {\r\n        for(let episode of season.episodes) {\r\n            if(episode.avgScore > 0){\r\n                sum = sum + episode.avgScore;\r\n                reviewedEpisodeCount++;\r\n            } \r\n        }\r\n    }\r\n    return sum / reviewedEpisodeCount;\r\n}\r\n\r\nfunction setSeriesCastFromSeason(season: ISeason, seriesCast: ISeriesCast[]){\r\n    for(let episode of season.episodes) {\r\n        setSeriesCastFromEpisode(episode, seriesCast);\r\n    }\r\n}\r\n\r\nfunction setSeriesCastFromEpisode(episode: IMovie, seriesCast: ISeriesCast[]){\r\n    for(let cast of episode.casts) {\r\n        setSeriesCastFromCast(cast, seriesCast);\r\n    }\r\n}\r\n\r\nfunction setSeriesCastFromCast(cast: ICast, seriesCast: any[]){\r\n    let sc: ISeriesCast = seriesCast.find(a=> a.artistId === cast.artistId);\r\n    if(sc != null){\r\n        handleExistingSeriesCast(cast, sc);\r\n    } else {\r\n        seriesCast.push({ \r\n            artistId: cast.artistId, \r\n            artistName: cast.artistName, \r\n            episodeCount: 1, \r\n            characterNames: [cast.name], \r\n            castTypeId: cast.castTypeId } );\r\n    }\r\n}\r\n\r\nfunction handleExistingSeriesCast(cast: ICast, sc: any){\r\n     let updatedNames = sc.characterNames;\r\n     if(sc.characterNames.filter(a=> a === cast.name).length === 0){\r\n         updatedNames.push(cast.name);\r\n     }\r\n     sc = {...sc, episodeCount: sc.episodeCount++, characterNames: updatedNames };\r\n}\r\n\r\nfunction orderCasts(series: ISeries){\r\n    for(let season of series.seasons) {\r\n        orderSeasonCast(season);\r\n    }\r\n}\r\n\r\nfunction orderSeasonCast(seasons: ISeason){\r\n    for(let episode of seasons.episodes) {\r\n            episode.casts.sort(compareCastType);\r\n    }\r\n}\r\n\r\nexport function compareEpisodes(episode1: IMovie, episode2: IMovie){\r\n    if(new Date(episode1.releaseDate) > new Date(episode2.releaseDate)){\r\n        return 1;\r\n    }\r\n    if(new Date(episode1.releaseDate) < new Date(episode2.releaseDate)){\r\n        return -1;\r\n    }\r\n    if(episode1.releaseDate === episode2.releaseDate){\r\n        if(episode1.id > episode2.id) return 1;\r\n        if(episode1.id < episode2.id) return -1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { Score } from './Score';\r\nimport { normalFormat } from '../../dateParser';\r\nimport { IMovie } from '../../../common/movie';\r\nimport { ESize, useCutter, useImage } from '../../hooks';\r\nimport \"./movieStyle.css\";\r\n\r\ninterface IMovieRow{\r\n    movie: IMovie;\r\n    cutPos?: number;\r\n}\r\n\r\nexport const MovieRow: React.FC<IMovieRow> = ({movie, cutPos = 70}: IMovieRow) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/posters\", `${movie.id}.jpg`, ESize.Small);\r\n    const [imgClass, setImgClass] = useState(\"\");\r\n    const [summary] = useCutter(movie.summary, cutPos);\r\n    useEffect(()=>{\r\n        if(movie.avgScore > 6){\r\n            setImgClass(\"high-poster\");\r\n        } else if(movie.avgScore > 3){\r\n            setImgClass(\"medium-poster\");\r\n        } else if(movie.avgScore > 0) {\r\n            setImgClass(\"low-poster\");\r\n        } else {\r\n            setImgClass(\"\");\r\n        }\r\n        if(window.screen.width > 600){\r\n\r\n        }\r\n    }, [movie]);\r\n    return (\r\n        <Link className=\"movie-row-grid\" to={`/rewer/movie?movieId=${movie.id}`}>\r\n            <img className={imgClass} src={imgsrc} alt={`poster-${movie.id}`} title={movie.title} onError={onImgError} />\r\n            <div>\r\n                <p className=\"row-title\">{movie.title}</p>\r\n                <p className=\"summary\">{summary}</p>\r\n            </div>\r\n            {(new Date(movie.releaseDate) <= new Date()) ? \r\n            (<Score value={movie.avgScore} />) ? (movie.releaseDate == null) : \r\n            (<p></p>) :\r\n            (<p className=\"movie-row-date\">{normalFormat(movie.releaseDate.toString())}</p>)\r\n            }\r\n        </Link>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { IMovie } from '../../../common/movie';\r\nimport { ESize, useImage } from '../../hooks';\r\n\r\ninterface IMovieDiv{\r\n    movie: IMovie;\r\n}\r\n\r\nexport const MovieDiv: React.FC<IMovieDiv> = ({movie}: IMovieDiv) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/posters\", `${movie.id}.jpg`, ESize.Medium, true);\r\n    const [imgClass, setImgClass] = useState(\"\");\r\n    const [scoreClass, setScoreClass] = useState(\"\");\r\n    const scoreLine = useRef<HTMLDivElement>();\r\n    useEffect(()=>{\r\n        if(movie.avgScore > 6){\r\n            setImgClass(\"high-poster\");\r\n            setScoreClass(\"high\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else if(movie.avgScore > 3){\r\n            setImgClass(\"medium-poster\");\r\n            setScoreClass(\"medium\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else if(movie.avgScore > 0){\r\n            setImgClass(\"low-poster\");\r\n            setScoreClass(\"low\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else {\r\n            scoreLine.current.style.display = \"none\";\r\n        }\r\n    }, [movie]);\r\n\r\n    useEffect(()=>{\r\n\r\n    }, [movie])\r\n\r\n    return (\r\n        <div className=\"movie-container fade\">\r\n            <img className={imgClass} src={imgsrc} alt={`${movie.title}-poster`} onError={onImgError} />\r\n            <p className=\"movie-title\">{movie.title}</p>\r\n            <div ref={scoreLine} className={scoreClass} >\r\n                <p className=\"score-line\">{ Math.round(movie.avgScore * 10)/10}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieDiv;","import React, {useState, useRef, useEffect } from 'react'\r\nimport { IPreviewSeries } from '../../../common/series';\r\nimport { useImage } from '../../hooks';\r\nimport \"../movie/movieStyle.css\";\r\n\r\ninterface ISeriesDiv{\r\n    series: IPreviewSeries;\r\n}\r\n\r\nexport const SeriesDiv: React.FC<ISeriesDiv> = ({series}: ISeriesDiv) => {\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/seriesposters\", `${series.id}.jpg`);\r\n    const [imgClass, setImgClass] = useState(\"\");\r\n    const [scoreClass, setScoreClass] = useState(\"\");\r\n    const scoreLine = useRef<HTMLDivElement>();\r\n\r\n    useEffect(()=>{\r\n        if(series.avgScore > 6){\r\n            setImgClass(\"high-poster\");\r\n            setScoreClass(\"high\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else if(series.avgScore > 3){\r\n            setImgClass(\"medium-poster\");\r\n            setScoreClass(\"medium\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else if(series.avgScore > 0){\r\n            setImgClass(\"low-poster\");\r\n            setScoreClass(\"low\");\r\n            scoreLine.current.style.display = \"block\";\r\n        } else {\r\n            scoreLine.current.style.display = \"none\";\r\n        }\r\n    }, [series]);\r\n    \r\n    return (\r\n        <div className=\"movie-container fade\">            \r\n            <img className={imgClass} src={imgsrc} alt={`${series.title}-poster`} onError={onImgError} />                \r\n            <p className=\"movie-title\">{series.title}</p>\r\n            <div ref={scoreLine} className={scoreClass} >\r\n                <p className=\"score-line\">{ Math.round(series.avgScore * 10)/10}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SeriesDiv;","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { IDetailedMovie } from '../../../common/movie';\r\nimport { getCaller } from '../../callers/caller';\r\nimport { moviePath } from '../../callers/movieCaller';\r\nimport MovieDiv from './MovieDiv';\r\n\r\nexport default function FeaturedSides() {\r\n    const[featuredMovies, setFeaturedMovies] = useState<IDetailedMovie[]>([]);\r\n    const [caller, signal] = getCaller(moviePath.selectLatestMoviesJson)\r\n    useEffect(()=>{\r\n        getLatestFeatures();\r\n        return ()=>{\r\n            signal.abort();\r\n        }\r\n    }, []);\r\n\r\n    async function getLatestFeatures(){\r\n        const movies: IDetailedMovie[] = await caller();\r\n        const rnd = Math.floor(Math.random()*5);\r\n        if(movies) setFeaturedMovies(movies.slice(rnd, rnd+2)); \r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"center-text\">Featured Films</h3>\r\n                    <div className=\"double-grid\">\r\n                        {featuredMovies.map(f=> {\r\n                            return (<Link key={`featured-${f.id}`} to={`/rewer/movie?movieId=${f.id}`}>\r\n                                        <MovieDiv movie={f} />\r\n                                    </Link>)\r\n                        })}\r\n                    </div>  \r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { IMovie } from '../../../common/movie'\r\nimport { MovieRow } from './MovieRow'\r\n\r\ninterface IMovieRowList{\r\n    movies: IMovie[];\r\n}\r\n\r\nexport const MovieRowList: React.FC<IMovieRowList> = ({movies}: IMovieRowList) => {\r\n    return (\r\n        <div>\r\n            {movies.map(m=>{\r\n                return <MovieRow key={`movie-row-${m.id}`} movie={m} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { IPreviewSeries } from '../../../common/series';\r\nimport { getCaller } from '../../callers/caller';\r\nimport { seriesPath } from '../../callers/seriesCaller';\r\nimport SeriesDiv from './SeriesDiv';\r\n\r\ninterface IFeaturedSeriesSides{\r\n   // series: ISeries[];\r\n}\r\n\r\nexport const FeaturedSeriesSides: React.FC<IFeaturedSeriesSides> = () => {\r\n    const [featueredSeries, setFeaturedSeries] = useState([]);\r\n    const [seriesCaller, signal] = getCaller(seriesPath.selectLatestPreviewSeriesJson);\r\n    useEffect(()=>{\r\n        requestFeaturedSeries();\r\n        return ()=>{\r\n            signal.abort();\r\n        }\r\n    }, []);\r\n\r\n    async function requestFeaturedSeries(){\r\n        const featured: IPreviewSeries[] = await seriesCaller();\r\n        if(featured){\r\n            setFeaturedSeries(featured.slice(0, 2)); //majd random lesz elég adattal\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"center-text\">Featured Series</h3>\r\n                <div className=\"double-grid\">\r\n                    {featueredSeries.map(f=> {\r\n                        return (<Link key={`featured-${f.id}`} to={`/rewer/series?seriesId=${f.id}`}>\r\n                                    <SeriesDiv series={f} />\r\n                                </Link>)\r\n                    })}\r\n                </div>  \r\n        </div>\r\n    )\r\n}\r\nexport default FeaturedSeriesSides;","import { UploadFile } from \"./caller\";\r\n\r\nexport const articlePath = {\r\n    insertArticle: \"/article/insert_article\",\r\n    updateArticle: \"/article/update_article\",\r\n    deleteArticle: \"/article/delete_article\",\r\n    selectLatestArticles: \"/article/select_latest_articles\",\r\n    selectArticlesByUser: \"/article/select_articles_by_user\",\r\n    uploadImage: \"/article/upload_article_image\"\r\n}\r\n\r\nexport async function uploadArticleImage(file: FormData): Promise<boolean>{\r\n    const response = await UploadFile(\"/article/upload_article_image\", file);\r\n    if(response.ok){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const isBoolActuallyBool = (bool: boolean | any)=>{\r\n    const type = typeof bool;\r\n    if(type !== \"boolean\"){\r\n        throw `BoolIsActuallyA${type}Exception`;\r\n    }\r\n    if(bool !== true) {\r\n        const newTrue = !bool;\r\n        return newTrue;\r\n    }\r\n}\r\n\r\nexport const generateFakeErrorMessage = ()=>{\r\n    const errorCode = Math.floor(Math.random() * 1000);\r\n    const stack = Math.floor(Math.random() * 100000000000);\r\n    const word = Math.random().toString(36).substring(7);\r\n    const stack2 = Math.floor(Math.random() * 100000000000);\r\n    const word2 = Math.random().toString(36).substring(7);\r\n    const types = [\"Memory\", \"Fatal\", \"Unknown\", \"Server\", \"Connection\", \"Stackoverflow\", \"Stackbelowflow\", \"Index\"];\r\n    const errorType = types[Math.floor(Math.random() * types.length + 1)];\r\n    const errorString = `${errorType} error in stack ${word}${stack}-${word2}${stack2}. Errorcode: ${errorCode}.`;\r\n    alert(errorString);\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { IGenre } from '../../../common/genre';\r\n\r\ninterface IGenreSelect{\r\n    selectedGenre: IGenre;\r\n    setSelectedGenre: (g: IGenre) => void;\r\n    genres: IGenre[];\r\n    any?: boolean;\r\n}\r\n\r\nexport const GenreSelect: React.FC<IGenreSelect> = ({genres, setSelectedGenre, selectedGenre, any}: IGenreSelect)=> {\r\n    const [getGenres, setGenres] = useState([]);\r\n    useEffect(()=>{\r\n        if(any){\r\n            setGenres([{id: 0, name: \"Any\"}, ...genres]);\r\n        } else {\r\n            setGenres(genres);\r\n        }\r\n    }, [genres]);\r\n    return (\r\n        <select value={selectedGenre.id.toString()} onChange={(e)=> { setSelectedGenre(getGenres.find(g=> g.id === parseInt(e.target.value))) }} >\r\n            {getGenres.map(g=> {\r\n                return <option key={`opt${g.id}`} value={g.id}>{g.name}</option>\r\n            })}\r\n        </select>\r\n    )\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { IGenre } from '../../../common/genre';\r\nimport { IDetailedMovie } from '../../../common/movie';\r\nimport { getCaller, postCaller } from '../../callers/caller';\r\nimport { moviePath } from \"../../callers/movieCaller\";\r\nimport { GenreSelect } from './GenreSelect';\r\nimport { MovieRowList } from './MovieRowList';\r\n\r\ninterface IGenreSide{\r\n    length: number;\r\n}\r\n\r\nexport const GenreSide: React.FC<IGenreSide> = ({length}: IGenreSide) => {\r\n    const [genres, setGenres] = useState([]);\r\n    const [selectedGenre, setSelectedGenre] = useState({id: 0, name: \"\"});\r\n    const [movies, setMovies] = useState([]);\r\n    const [genreCaller, genreSignal] = getCaller(moviePath.getGenres);\r\n    const [movieCaller, movieSignal] = postCaller({ genreId: selectedGenre.id, limit: length, offset: 0 }, moviePath.selectLatestMoviesByGenre);\r\n    useEffect(()=>{\r\n        requestGenres();\r\n        return ()=>{\r\n            movieSignal.abort();\r\n            genreSignal.abort();\r\n        }\r\n    }, []);\r\n\r\n    async function requestGenres(){\r\n        const allGenres: IGenre[] = await genreCaller();\r\n        if(allGenres){\r\n            setGenres(allGenres);\r\n        }\r\n    }\r\n\r\n    async function requestMovies(){\r\n        const movies: IDetailedMovie[] = await movieCaller()\r\n        if(movies){\r\n            setMovies(movies);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(genres.length > 0){\r\n            setSelectedGenre(genres[Math.floor(Math.random()*genres.length)]);\r\n        }\r\n    }, [genres]);\r\n\r\n    useEffect(()=>{\r\n        if(selectedGenre.id > 0){\r\n            requestMovies();\r\n        }\r\n    }, [selectedGenre]);\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"center-text\">Fresh of \r\n                <GenreSelect selectedGenre={selectedGenre} genres={genres} setSelectedGenre={(g)=> { setSelectedGenre(g) }} />\r\n            </h3>\r\n            <MovieRowList movies={movies.map(m=> { return {...m, summary: \"\"} })} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GenreSide;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect, Fragment} from 'react'\r\nimport { IDetailedMovie, WSelectMoviesByScoreRequest } from '../../../common/movie';\r\nimport { postCaller } from '../../callers/caller';\r\nimport { moviePath } from '../../callers/movieCaller';\r\nimport { MovieRow } from './MovieRow'\r\n\r\nexport default function TopRatedSides() {\r\n    const[topRateds, setTopRateds] = useState([]);\r\n    const request: WSelectMoviesByScoreRequest = {\r\n        min: 7,\r\n        limit: 4,\r\n        offset: 0\r\n    }\r\n    const [callTopRated, signal] = postCaller(request, moviePath.selectMoviesByScore);\r\n    useEffect(()=>{\r\n        async function getTopRateds(){\r\n            const tops: IDetailedMovie[] = await callTopRated();\r\n            if(tops){\r\n                setTopRateds(tops);\r\n            }\r\n        }\r\n        getTopRateds();\r\n        return ()=>{\r\n            signal.abort();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n             <h3 className=\"center-text\">Top Rated</h3>      \r\n                    {topRateds.map(t=>{\r\n                        return <MovieRow key={`top-rated-${t.id}`} movie={{...t, summary: \"\"}} />\r\n                    })} \r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { IArticle } from '../../../common/article'\r\nimport { ESize, useCutter, useImage } from '../../hooks'\r\nimport { Link } from \"react-router-dom\"\r\nimport \"./articleStyles.css\"\r\n\r\ninterface IArticleRow{\r\n    article: IArticle;\r\n    cutPos: number;\r\n}\r\n\r\nexport const ArticleRow: React.FC<IArticleRow> = ({article, cutPos}: IArticleRow)=> {\r\n    const [text, isTextCut, cutText] = useCutter(article.text, cutPos);\r\n    const [imgsrc, onImgError] = useImage(\"/rewer/uploads/articles\", `${article.id}.jpg`, ESize.Medium);\r\n\r\n    return (\r\n        <div className=\"article-row\">\r\n                <h3>{article.title}</h3>\r\n                <img src={imgsrc} onError={onImgError} alt={`article_${article.title}`} /> \r\n                <p>{text}</p>\r\n                {(isTextCut)?\r\n                (<Fragment><p onClick={()=> { cutText(article.text) }} className=\"show-more\">Show more</p></Fragment>):\r\n                (<Fragment>\r\n                    {(article.text.length > cutPos)?\r\n                    (<Fragment><p className=\"show-more\" onClick={()=>{ cutText(article.text, cutPos) }}>Show less</p></Fragment>):\r\n                    (<Fragment></Fragment>)}\r\n                </Fragment>)\r\n                }\r\n                <p><Link to={`/rewer/user?userName=${article.userName}`}>By <i>{article.userName}</i></Link></p>\r\n                {(article.readMore != null && article.readMore.length > 10)?\r\n                (<a href={article.readMore} target=\"blank\" >Read the full article</a>):\r\n                (<Fragment></Fragment>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArticleRow;","import React from 'react'\r\nimport { IArticle } from '../../../common/article'\r\nimport ArticleRow from './ArticleRow'\r\n\r\ninterface IArticleRowList{\r\n    articles: IArticle[];\r\n    cutPos: number;\r\n}\r\n\r\nexport const ArticleRowList: React.FC<IArticleRowList> = ({articles, cutPos}: IArticleRowList)=> {\r\n    return (\r\n        <div>\r\n            {articles.map(a=>{\r\n                return <ArticleRow key={`article-row-${a.id}`} article={a} cutPos={cutPos} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArticleRowList;"],"sourceRoot":""}